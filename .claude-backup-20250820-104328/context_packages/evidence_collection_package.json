{
  "package_id": "evidence_collection_framework",
  "priority": "HIGH",
  "token_count": 3200,
  "coordination_metadata": {
    "phase": 5,
    "stream": 4,
    "dependencies": ["infrastructure_fix_qdrant_tls", "service_health_monitoring"],
    "estimated_duration": "30 minutes",
    "risk_level": "NONE"
  },
  "evidence_requirements": {
    "objective": "Collect concrete, irrefutable evidence of system functionality",
    "false_positive_tolerance": "0%",
    "validation_levels": ["infrastructure", "service", "api", "user_experience"]
  },
  "infrastructure_evidence": {
    "docker_validation": {
      "command": "docker ps --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}'",
      "expected": "All containers showing 'Up' status",
      "screenshot_required": true
    },
    "network_connectivity": {
      "commands": [
        "docker exec api_gateway ping -c 1 qdrant",
        "docker exec api_gateway ping -c 1 redis",
        "docker exec api_gateway ping -c 1 postgres"
      ],
      "expected": "0% packet loss for all services",
      "log_capture": true
    },
    "ssl_verification": {
      "command": "docker logs learning_service 2>&1 | grep -i ssl",
      "expected": "No SSL verification errors",
      "evidence_type": "log_excerpt"
    }
  },
  "service_evidence": {
    "health_endpoints": {
      "validation_script": "#!/bin/bash\nfor port in 8001 8002 8003 8004 8005 8006 8008; do\n  echo \"Testing port $port:\"\n  response=$(curl -s -w '\\nHTTP_CODE:%{http_code}' http://localhost:$port/health)\n  echo \"$response\"\n  echo \"---\"\ndone",
      "expected_results": "All services return HTTP 200 with status: healthy",
      "output_format": "json_and_http_code"
    },
    "qdrant_connections": {
      "validation": "docker exec learning_service python -c 'from qdrant_client import QdrantClient; client = QdrantClient(url=\"http://qdrant:6333\", verify=False); print(client.get_collections())'",
      "expected": "Successful collection listing without SSL errors",
      "critical": true
    }
  },
  "api_evidence": {
    "endpoint_testing": {
      "chat_api": {
        "command": "curl -X POST http://localhost:8001/api/chat -H 'Content-Type: application/json' -d '{\"message\": \"Hello\"}'",
        "expected": "200 OK with response data",
        "screenshot": true
      },
      "documents_api": {
        "command": "curl http://localhost:8001/api/documents",
        "expected": "200 OK with document list or empty array",
        "screenshot": true
      },
      "calendar_api": {
        "command": "curl http://localhost:8001/api/calendar/events",
        "expected": "200 OK with event list or empty array",
        "screenshot": true
      }
    },
    "authentication": {
      "test": "curl -X POST http://localhost:8001/api/auth/login -d '{\"username\":\"admin\",\"password\":\"admin\"}'",
      "expected": "JWT token in response",
      "critical": true
    }
  },
  "user_experience_evidence": {
    "playwright_tests": [
      {
        "test_name": "Login Flow",
        "steps": [
          "Navigate to http://localhost:8002",
          "Enter credentials",
          "Click login",
          "Verify dashboard loads"
        ],
        "screenshot_points": ["login_page", "dashboard_loaded"]
      },
      {
        "test_name": "Chat Functionality",
        "steps": [
          "Navigate to chat interface",
          "Send test message",
          "Verify response received",
          "Check message history"
        ],
        "screenshot_points": ["chat_interface", "message_sent", "response_received"]
      }
    ],
    "production_validation": {
      "urls": ["http://aiwfe.com", "https://aiwfe.com"],
      "checks": [
        "Site accessibility",
        "SSL certificate validity",
        "Login functionality",
        "Core features available"
      ],
      "evidence": "Screenshots and curl responses from production URLs"
    }
  },
  "evidence_aggregation": {
    "report_format": "markdown_with_embedded_images",
    "storage_location": ".claude/evidence/phase5_validation/",
    "automated_collection": "bash scripts/collect_all_evidence.sh",
    "success_criteria": {
      "infrastructure": "100% containers healthy",
      "services": "100% health endpoints returning 200",
      "api": "100% critical endpoints functional",
      "user": "100% core workflows completable"
    }
  }
}