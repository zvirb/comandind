{
  "package_id": "api_endpoint_implementation",
  "priority": "HIGH",
  "token_count": 3500,
  "coordination_metadata": {
    "phase": 5,
    "stream": 3,
    "dependencies": ["infrastructure_fix_qdrant_tls"],
    "estimated_duration": "25 minutes",
    "risk_level": "MEDIUM"
  },
  "missing_endpoints": {
    "discovery_source": "Production validation and API testing",
    "critical_endpoints": ["/api/chat", "/api/documents", "/api/calendar"],
    "implementation_location": "app/api_gateway/routers/"
  },
  "chat_endpoint": {
    "router_file": "app/api_gateway/routers/chat.py",
    "implementation": {
      "imports": "from fastapi import APIRouter, HTTPException, Depends\nfrom pydantic import BaseModel\nimport httpx\nimport logging",
      "models": "class ChatMessage(BaseModel):\n    message: str\n    context: dict = {}\n\nclass ChatResponse(BaseModel):\n    response: str\n    session_id: str",
      "router_setup": "router = APIRouter(prefix='/api/chat', tags=['chat'])\nlogger = logging.getLogger(__name__)",
      "endpoints": [
        {
          "path": "/",
          "method": "POST",
          "function": "@router.post('/', response_model=ChatResponse)\nasync def send_message(message: ChatMessage):\n    try:\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                'http://reasoning_service:8006/process',\n                json={'message': message.message, 'context': message.context}\n            )\n            return ChatResponse(**response.json())\n    except Exception as e:\n        logger.error(f'Chat error: {e}')\n        raise HTTPException(status_code=500, detail=str(e))"
        },
        {
          "path": "/history",
          "method": "GET",
          "function": "@router.get('/history')\nasync def get_chat_history(session_id: str = None):\n    try:\n        async with httpx.AsyncClient() as client:\n            response = await client.get(\n                f'http://memory_service:8005/chat/history?session_id={session_id}'\n            )\n            return response.json()\n    except Exception as e:\n        logger.error(f'History error: {e}')\n        raise HTTPException(status_code=500, detail=str(e))"
        }
      ]
    },
    "main_integration": "# Add to app/api_gateway/main.py\nfrom routers import chat\napp.include_router(chat.router)"
  },
  "documents_endpoint": {
    "router_file": "app/api_gateway/routers/documents.py",
    "implementation": {
      "imports": "from fastapi import APIRouter, UploadFile, File, HTTPException\nimport httpx\nfrom typing import List",
      "router_setup": "router = APIRouter(prefix='/api/documents', tags=['documents'])",
      "endpoints": [
        {
          "path": "/",
          "method": "GET",
          "function": "@router.get('/')\nasync def list_documents():\n    try:\n        async with httpx.AsyncClient() as client:\n            response = await client.get('http://worker_service:8004/documents')\n            return response.json()\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))"
        },
        {
          "path": "/upload",
          "method": "POST",
          "function": "@router.post('/upload')\nasync def upload_document(file: UploadFile = File(...)):\n    try:\n        contents = await file.read()\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                'http://worker_service:8004/documents/process',\n                files={'file': (file.filename, contents, file.content_type)}\n            )\n            return response.json()\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))"
        }
      ]
    }
  },
  "calendar_endpoint": {
    "router_file": "app/api_gateway/routers/calendar.py",
    "implementation": {
      "imports": "from fastapi import APIRouter, HTTPException, Depends\nfrom datetime import datetime, timedelta\nfrom pydantic import BaseModel\nimport httpx",
      "models": "class CalendarEvent(BaseModel):\n    title: str\n    start: datetime\n    end: datetime\n    description: str = ''",
      "router_setup": "router = APIRouter(prefix='/api/calendar', tags=['calendar'])",
      "endpoints": [
        {
          "path": "/events",
          "method": "GET",
          "function": "@router.get('/events')\nasync def get_events(start_date: datetime = None, end_date: datetime = None):\n    try:\n        # For now, return mock data until calendar service is implemented\n        return {\n            'events': [],\n            'status': 'calendar_service_pending'\n        }\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))"
        },
        {
          "path": "/events",
          "method": "POST",
          "function": "@router.post('/events')\nasync def create_event(event: CalendarEvent):\n    try:\n        # Store in memory service for now\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                'http://memory_service:8005/store',\n                json={'type': 'calendar_event', 'data': event.dict()}\n            )\n            return {'event_id': response.json().get('id'), 'status': 'created'}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))"
        }
      ]
    }
  },
  "testing_requirements": {
    "unit_tests": "Create test files for each router in tests/api_gateway/",
    "integration_tests": "Test end-to-end flow with all services running",
    "curl_tests": [
      "curl -X POST http://localhost:8001/api/chat -H 'Content-Type: application/json' -d '{\"message\":\"test\"}'",
      "curl http://localhost:8001/api/documents",
      "curl http://localhost:8001/api/calendar/events"
    ],
    "expected_responses": "All endpoints should return 200 OK or appropriate status codes"
  }
}