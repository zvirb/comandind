{
  "phase": "integration_implementation",
  "priority": "critical",
  "agent": "backend-gateway-expert",
  "focus": "Service boundary coordination without core logic changes",
  
  "components_to_implement": {
    "jwt_token_adapter": {
      "location": "/app/api/middleware/jwt_adapter.py",
      "purpose": "Normalize JWT formats between legacy/enhanced",
      "key_methods": [
        "normalize_token() - Convert any format to standard",
        "generate_compatible_token() - Create dual-format tokens",
        "lookup_user_id() - Map email to user_id for legacy"
      ],
      "integration": "FastAPI middleware chain before auth checks"
    },
    
    "session_validation_normalizer": {
      "location": "/app/api/routers/session_router.py", 
      "purpose": "Standardize session validation responses",
      "key_methods": [
        "normalize_response() - Convert to standard format",
        "wrap_endpoint() - Decorator for existing endpoints"
      ],
      "integration": "Wrap existing /api/auth/session and /api/auth/validate"
    },
    
    "fallback_session_provider": {
      "location": "/app/shared/session_provider.py",
      "purpose": "Redis fallback with local cache",
      "key_methods": [
        "get_session() - Auto-fallback on Redis failure",
        "sync_to_fallback() - Keep cache updated",
        "circuit_breaker_handler() - Manage failures"
      ],
      "integration": "Replace direct Redis calls in auth middleware"
    },
    
    "websocket_auth_gateway": {
      "location": "/app/api/middleware/ws_auth.py",
      "purpose": "Enforce WebSocket authentication",
      "key_methods": [
        "authenticate_upgrade() - Pre-upgrade validation",
        "extract_token() - Get token from request",
        "attach_auth_context() - Add auth to WS connection"
      ],
      "integration": "Add to WebSocket upgrade handler"
    },
    
    "service_boundary_coordinator": {
      "location": "/app/coordination_service/boundary_coordinator.py",
      "purpose": "Orchestrate cross-service state sync",
      "key_methods": [
        "synchronize_login() - Coordinate login across services",
        "publish_auth_event() - Notify all services",
        "maintain_state_map() - Track auth state"
      ],
      "integration": "Call from auth endpoints after successful operations"
    }
  },
  
  "implementation_sequence": [
    {
      "step": 1,
      "components": ["jwt_token_adapter", "session_validation_normalizer"],
      "risk": "low",
      "validation": "Token format tests, response consistency"
    },
    {
      "step": 2,
      "components": ["fallback_session_provider"],
      "risk": "medium",
      "validation": "Circuit breaker tests, cache verification"
    },
    {
      "step": 3,
      "components": ["websocket_auth_gateway"],
      "risk": "high",
      "validation": "WS auth enforcement, connection tests"
    },
    {
      "step": 4,
      "components": ["service_boundary_coordinator"],
      "risk": "integration",
      "validation": "End-to-end flow, state sync verification"
    }
  ],
  
  "critical_fixes": {
    "jwt_format_issue": {
      "problem": "Backend handles sub=email OR sub=user_id inconsistently",
      "solution": "JWT adapter normalizes both to standard format",
      "files": ["/app/api/dependencies.py", "/app/api/middleware/auth.py"]
    },
    
    "session_validation_issue": {
      "problem": "Session endpoint returns wrong format, frontend misinterprets",
      "solution": "Normalizer ensures consistent response structure",
      "files": ["/app/api/routers/auth_router.py"]
    },
    
    "redis_circuit_breaker_issue": {
      "problem": "Silent failures when circuit breaker opens",
      "solution": "Fallback provider maintains local cache",
      "files": ["/app/shared/redis_client.py"]
    },
    
    "websocket_bypass_issue": {
      "problem": "WebSocket connections bypass all auth",
      "solution": "Gateway validates before upgrade",
      "files": ["/app/api/routers/chat_ws_fixed.py"]
    }
  },
  
  "validation_requirements": [
    "JWT token normalization working for both formats",
    "Session responses consistent across all endpoints",
    "Fallback cache activates on Redis failure",
    "WebSocket connections require valid auth",
    "State synchronization across services confirmed"
  ],
  
  "rollback_checkpoints": [
    "Before JWT adapter integration",
    "After session normalizer deployment",
    "Before WebSocket gateway activation",
    "After full integration complete"
  ]
}