{
  "phase": "integration_validation",
  "priority": "critical",
  "agent": "user-experience-auditor",
  "focus": "Validate integrated session management through real user workflows",
  
  "validation_workflows": [
    {
      "name": "Session Persistence Validation",
      "steps": [
        "Navigate to https://aiwfe.com",
        "Login with test credentials",
        "Click Documents tab",
        "Verify still logged in",
        "Click Calendar tab", 
        "Verify still logged in",
        "Click Chat tab",
        "Verify WebSocket connects with auth"
      ],
      "evidence": ["Screenshots at each step", "Session cookie persistence", "Network logs"]
    },
    
    {
      "name": "Redis Fallback Validation",
      "steps": [
        "Login to system",
        "Trigger Redis failure (kill container)",
        "Navigate between pages",
        "Verify session continues (degraded mode)",
        "Restore Redis",
        "Verify automatic recovery"
      ],
      "evidence": ["Degraded mode UI screenshot", "Session continuity logs", "Recovery confirmation"]
    },
    
    {
      "name": "WebSocket Authentication Validation",
      "steps": [
        "Open browser dev tools",
        "Navigate to Chat",
        "Inspect WebSocket connection",
        "Verify auth token in connection params",
        "Logout and try WS connection",
        "Verify connection rejected"
      ],
      "evidence": ["WS connection headers", "Auth token presence", "Rejection on invalid auth"]
    },
    
    {
      "name": "Token Format Compatibility",
      "steps": [
        "Create user with legacy system",
        "Login (generates sub=email token)",
        "Navigate all sections",
        "Create user with new system",
        "Login (generates sub=user_id token)",
        "Navigate all sections"
      ],
      "evidence": ["Both token formats working", "No navigation issues", "Consistent session state"]
    },
    
    {
      "name": "CSRF Protection Validation",
      "steps": [
        "Test in development environment",
        "Verify CSRF handling",
        "Test in production environment",
        "Verify same CSRF behavior",
        "Test cross-origin request rejection"
      ],
      "evidence": ["CSRF token in requests", "Consistent behavior", "CORS rejection proof"]
    }
  ],
  
  "performance_benchmarks": {
    "session_check_latency": "< 50ms",
    "fallback_activation": "< 100ms",
    "state_sync_delay": "< 100ms",
    "websocket_auth": "< 200ms"
  },
  
  "automation_requirements": {
    "playwright_tests": [
      "test_session_persistence.py",
      "test_redis_fallback.py",
      "test_websocket_auth.py",
      "test_token_compatibility.py",
      "test_csrf_protection.py"
    ],
    "evidence_collection": [
      "Screenshot after each navigation",
      "Session state at each checkpoint",
      "Network request/response logs",
      "WebSocket frame captures"
    ]
  },
  
  "success_metrics": {
    "primary": {
      "session_persistence": "> 99%",
      "endpoint_success": "> 90%",
      "websocket_auth": "100%",
      "fallback_activation": "< 60s"
    },
    "secondary": {
      "token_compatibility": "100%",
      "csrf_consistency": "100%",
      "state_sync_latency": "< 100ms",
      "degraded_performance": "< 10% slower"
    }
  },
  
  "failure_indicators": [
    "Logout on navigation",
    "WebSocket connects without auth",
    "Session lost on Redis failure",
    "Token format errors",
    "CSRF validation inconsistent"
  ],
  
  "rollback_triggers": [
    "Session persistence < 95%",
    "Endpoint success < 70%",
    "WebSocket auth bypass detected",
    "Critical errors in production"
  ]
}