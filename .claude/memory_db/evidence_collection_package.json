{
  "package_id": "evidence_collection_package",
  "package_type": "migrated-context",
  "content": "{\n  \"package_id\": \"evidence_collection_framework\",\n  \"priority\": \"HIGH\",\n  \"token_count\": 3200,\n  \"coordination_metadata\": {\n    \"phase\": 5,\n    \"stream\": 4,\n    \"dependencies\": [\"infrastructure_fix_qdrant_tls\", \"service_health_monitoring\"],\n    \"estimated_duration\": \"30 minutes\",\n    \"risk_level\": \"NONE\"\n  },\n  \"evidence_requirements\": {\n    \"objective\": \"Collect concrete, irrefutable evidence of system functionality\",\n    \"false_positive_tolerance\": \"0%\",\n    \"validation_levels\": [\"infrastructure\", \"service\", \"api\", \"user_experience\"]\n  },\n  \"infrastructure_evidence\": {\n    \"docker_validation\": {\n      \"command\": \"docker ps --format 'table {{.Names}}\\\\t{{.Status}}\\\\t{{.Ports}}'\",\n      \"expected\": \"All containers showing 'Up' status\",\n      \"screenshot_required\": true\n    },\n    \"network_connectivity\": {\n      \"commands\": [\n        \"docker exec api_gateway ping -c 1 qdrant\",\n        \"docker exec api_gateway ping -c 1 redis\",\n        \"docker exec api_gateway ping -c 1 postgres\"\n      ],\n      \"expected\": \"0% packet loss for all services\",\n      \"log_capture\": true\n    },\n    \"ssl_verification\": {\n      \"command\": \"docker logs learning_service 2>&1 | grep -i ssl\",\n      \"expected\": \"No SSL verification errors\",\n      \"evidence_type\": \"log_excerpt\"\n    }\n  },\n  \"service_evidence\": {\n    \"health_endpoints\": {\n      \"validation_script\": \"#!/bin/bash\\nfor port in 8001 8002 8003 8004 8005 8006 8008; do\\n  echo \\\"Testing port $port:\\\"\\n  response=$(curl -s -w '\\\\nHTTP_CODE:%{http_code}' http://localhost:$port/health)\\n  echo \\\"$response\\\"\\n  echo \\\"---\\\"\\ndone\",\n      \"expected_results\": \"All services return HTTP 200 with status: healthy\",\n      \"output_format\": \"json_and_http_code\"\n    },\n    \"qdrant_connections\": {\n      \"validation\": \"docker exec learning_service python -c 'from qdrant_client import QdrantClient; client = QdrantClient(url=\\\"http://qdrant:6333\\\", verify=False); print(client.get_collections())'\",\n      \"expected\": \"Successful collection listing without SSL errors\",\n      \"critical\": true\n    }\n  },\n  \"api_evidence\": {\n    \"endpoint_testing\": {\n      \"chat_api\": {\n        \"command\": \"curl -X POST http://localhost:8001/api/chat -H 'Content-Type: application/json' -d '{\\\"message\\\": \\\"Hello\\\"}'\",\n        \"expected\": \"200 OK with response data\",\n        \"screenshot\": true\n      },\n      \"documents_api\": {\n        \"command\": \"curl http://localhost:8001/api/documents\",\n        \"expected\": \"200 OK with document list or empty array\",\n        \"screenshot\": true\n      },\n      \"calendar_api\": {\n        \"command\": \"curl http://localhost:8001/api/calendar/events\",\n        \"expected\": \"200 OK with event list or empty array\",\n        \"screenshot\": true\n      }\n    },\n    \"authentication\": {\n      \"test\": \"curl -X POST http://localhost:8001/api/auth/login -d '{\\\"username\\\":\\\"admin\\\",\\\"password\\\":\\\"admin\\\"}'\",\n      \"expected\": \"JWT token in response\",\n      \"critical\": true\n    }\n  },\n  \"user_experience_evidence\": {\n    \"playwright_tests\": [\n      {\n        \"test_name\": \"Login Flow\",\n        \"steps\": [\n          \"Navigate to http://localhost:8002\",\n          \"Enter credentials\",\n          \"Click login\",\n          \"Verify dashboard loads\"\n        ],\n        \"screenshot_points\": [\"login_page\", \"dashboard_loaded\"]\n      },\n      {\n        \"test_name\": \"Chat Functionality\",\n        \"steps\": [\n          \"Navigate to chat interface\",\n          \"Send test message\",\n          \"Verify response received\",\n          \"Check message history\"\n        ],\n        \"screenshot_points\": [\"chat_interface\", \"message_sent\", \"response_received\"]\n      }\n    ],\n    \"production_validation\": {\n      \"urls\": [\"http://aiwfe.com\", \"https://aiwfe.com\"],\n      \"checks\": [\n        \"Site accessibility\",\n        \"SSL certificate validity\",\n        \"Login functionality\",\n        \"Core features available\"\n      ],\n      \"evidence\": \"Screenshots and curl responses from production URLs\"\n    }\n  },\n  \"evidence_aggregation\": {\n    \"report_format\": \"markdown_with_embedded_images\",\n    \"storage_location\": \".claude/evidence/phase5_validation/\",\n    \"automated_collection\": \"bash scripts/collect_all_evidence.sh\",\n    \"success_criteria\": {\n      \"infrastructure\": \"100% containers healthy\",\n      \"services\": \"100% health endpoints returning 200\",\n      \"api\": \"100% critical endpoints functional\",\n      \"user\": \"100% core workflows completable\"\n    }\n  }\n}",
  "tokens": 488,
  "created_at": "2025-08-18T15:14:25.378257",
  "last_accessed": "2025-08-18T15:14:25.378275",
  "priority": "medium",
  "context_tags": [
    "migrated",
    "context-package"
  ]
}