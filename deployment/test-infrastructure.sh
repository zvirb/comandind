#!/bin/bash

# Infrastructure Configuration Test Script
# Tests that all services can start properly with the fixed configurations

set -e

DEPLOYMENT_DIR="/home/marku/Documents/programming/comandind/deployment"
DOCKER_COMPOSE_DIR="${DEPLOYMENT_DIR}/docker-compose"

echo "=== Infrastructure Configuration Test ==="
echo "Testing infrastructure readiness after configuration fixes..."
echo ""

# Test 1: Configuration file validation
echo "üîç Test 1: Configuration File Validation"
echo "----------------------------------------"

MISSING_FILES=0

# Check fluentd.conf
if [ ! -f "${DEPLOYMENT_DIR}/fluentd.conf" ]; then
    echo "‚úó Missing: fluentd.conf"
    MISSING_FILES=$((MISSING_FILES + 1))
else
    echo "‚úì fluentd.conf exists and is accessible"
fi

# Check prometheus.yml
if [ ! -f "${DEPLOYMENT_DIR}/monitoring/prometheus.yml" ]; then
    echo "‚úó Missing: prometheus.yml"
    MISSING_FILES=$((MISSING_FILES + 1))
else
    echo "‚úì prometheus.yml exists and is accessible"
fi

# Check upstream.conf
if [ ! -f "${DEPLOYMENT_DIR}/nginx/upstream.conf" ]; then
    echo "‚úó Missing: upstream.conf"
    MISSING_FILES=$((MISSING_FILES + 1))
else
    echo "‚úì upstream.conf exists and is accessible"
fi

if [ $MISSING_FILES -gt 0 ]; then
    echo "‚ùå $MISSING_FILES configuration file(s) missing"
    exit 1
fi

echo ""

# Test 2: Docker Compose validation
echo "üê≥ Test 2: Docker Compose Configuration Validation"
echo "---------------------------------------------------"

cd "${DOCKER_COMPOSE_DIR}"

if docker compose -f docker-compose.blue-green.yml config --quiet; then
    echo "‚úì Docker Compose configuration is valid"
else
    echo "‚ùå Docker Compose configuration has errors"
    exit 1
fi

echo ""

# Test 3: Fluentd configuration validation
echo "üìù Test 3: Fluentd Configuration Validation"
echo "--------------------------------------------"

if docker run --rm -v "${DEPLOYMENT_DIR}/fluentd.conf:/fluentd/etc/fluent.conf:ro" fluent/fluentd:v1.16-1 fluentd --dry-run -c /fluentd/etc/fluent.conf >/dev/null 2>&1; then
    echo "‚úì Fluentd configuration is valid"
else
    echo "‚ùå Fluentd configuration has errors"
    echo "Running detailed check..."
    docker run --rm -v "${DEPLOYMENT_DIR}/fluentd.conf:/fluentd/etc/fluent.conf:ro" fluent/fluentd:v1.16-1 fluentd --dry-run -c /fluentd/etc/fluent.conf
    exit 1
fi

echo ""

# Test 4: Prometheus configuration validation
echo "üìä Test 4: Prometheus Configuration Validation"
echo "-----------------------------------------------"

if docker run --rm --entrypoint="" -v "${DEPLOYMENT_DIR}/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro" prom/prometheus:latest promtool check config /etc/prometheus/prometheus.yml >/dev/null 2>&1; then
    echo "‚úì Prometheus configuration is valid"
else
    echo "‚ùå Prometheus configuration has errors"
    echo "Running detailed check..."
    docker run --rm --entrypoint="" -v "${DEPLOYMENT_DIR}/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro" prom/prometheus:latest promtool check config /etc/prometheus/prometheus.yml
    exit 1
fi

echo ""

# Test 5: Nginx configuration validation
echo "üåê Test 5: Nginx Configuration Validation"
echo "------------------------------------------"

# Check if the upstream.conf file has the correct syntax structure
if grep -q "upstream game-active" "${DEPLOYMENT_DIR}/nginx/upstream.conf" && \
   grep -q "upstream game-standby" "${DEPLOYMENT_DIR}/nginx/upstream.conf" && \
   grep -q "upstream game-backup" "${DEPLOYMENT_DIR}/nginx/upstream.conf"; then
    echo "‚úì Nginx upstream configuration structure is correct"
    echo "  (Note: Host resolution will be validated when services are running)"
else
    echo "‚ùå Nginx upstream configuration is missing required upstream blocks"
    exit 1
fi

echo ""

# Test 6: Service dependency check
echo "üîó Test 6: Service Dependencies Check"
echo "--------------------------------------"

echo "Checking Docker daemon..."
if docker info >/dev/null 2>&1; then
    echo "‚úì Docker daemon is running"
else
    echo "‚ùå Docker daemon is not available"
    exit 1
fi

echo "Checking network connectivity for image pulls..."
if docker pull hello-world >/dev/null 2>&1; then
    echo "‚úì Can pull Docker images"
    docker rmi hello-world >/dev/null 2>&1
else
    echo "‚ö†Ô∏è  Warning: Cannot pull Docker images (check network connectivity)"
fi

echo ""

# Test 7: Port availability check
echo "üîå Test 7: Port Availability Check"
echo "-----------------------------------"

REQUIRED_PORTS=(80 443 8080 8081 8082 9090 24224)
PORT_CONFLICTS=0

for port in "${REQUIRED_PORTS[@]}"; do
    if netstat -tuln 2>/dev/null | grep ":${port} " >/dev/null; then
        echo "‚ö†Ô∏è  Port $port is already in use"
        PORT_CONFLICTS=$((PORT_CONFLICTS + 1))
    else
        echo "‚úì Port $port is available"
    fi
done

if [ $PORT_CONFLICTS -gt 0 ]; then
    echo "‚ö†Ô∏è  Warning: $PORT_CONFLICTS port(s) are in use. You may need to stop existing services."
fi

echo ""

# Summary
echo "üìã Test Summary"
echo "==============="

if [ $MISSING_FILES -eq 0 ]; then
    echo "üéâ All infrastructure configuration tests passed!"
    echo ""
    echo "‚úÖ Configuration files are in place and valid"
    echo "‚úÖ Docker Compose configuration is valid"
    echo "‚úÖ Fluentd logging configuration is valid"
    echo "‚úÖ Prometheus monitoring configuration is valid"
    echo "‚úÖ Nginx upstream configuration is valid"
    echo "‚úÖ Docker daemon is available"
    
    if [ $PORT_CONFLICTS -eq 0 ]; then
        echo "‚úÖ All required ports are available"
    fi
    
    echo ""
    echo "üöÄ Ready to deploy! Use the following command:"
    echo "cd ${DOCKER_COMPOSE_DIR}"
    echo "docker compose -f docker-compose.blue-green.yml up -d"
    echo ""
    echo "üìä Monitor deployment with:"
    echo "docker compose -f docker-compose.blue-green.yml logs -f"
    echo ""
    echo "üîç Check service health:"
    echo "curl http://localhost/health"
    echo "curl http://localhost:9090 # Prometheus"
    echo "curl http://localhost:8081/metrics # cAdvisor"
    
    exit 0
else
    echo "‚ùå Infrastructure configuration tests failed"
    echo "Please fix the issues above before deploying"
    exit 1
fi