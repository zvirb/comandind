# Fluentd Configuration for Command & Independent Thought Game Monitoring
# Collects logs from all Docker containers and forwards to appropriate destinations

<system>
  # Single worker mode for tail input compatibility
  root_dir /fluentd/log
  log_level info
</system>

# Input: Collect Docker container logs
<source>
  @type forward
  port 24224
  bind 0.0.0.0
  tag docker.*
</source>

# Input: Collect logs from mounted log files
<source>
  @type tail
  path /var/log/containers/*.log
  pos_file /fluentd/log/containers.log.pos
  tag kubernetes.*
  format json
  read_from_head true
</source>

# Input: Game application logs from blue deployment
<source>
  @type forward
  port 24225
  bind 0.0.0.0
  tag game.blue.*
</source>

# Input: Game application logs from green deployment
<source>
  @type forward
  port 24226
  bind 0.0.0.0
  tag game.green.*
</source>

# Filter: Parse container logs and add metadata
<filter docker.**>
  @type record_transformer
  <record>
    hostname "#{Socket.gethostname}"
    environment "#{ENV['NODE_ENV'] || 'production'}"
    service_type container
    timestamp ${time}
  </record>
</filter>

# Filter: Parse game application logs
<filter game.**>
  @type record_transformer
  <record>
    hostname "#{Socket.gethostname}"
    environment "#{ENV['NODE_ENV'] || 'production'}"
    service_type game_application
    deployment_slot ${tag_parts[1]}
    timestamp ${time}
  </record>
</filter>

# Filter: Add deployment metadata to all logs
<filter **>
  @type record_transformer
  <record>
    deployment_version "#{ENV['VERSION'] || '0.1.0'}"
    deployment_timestamp "#{ENV['DEPLOYMENT_TIMESTAMP'] || Time.now.utc.iso8601}"
  </record>
</filter>

# Output: Store game logs separately by deployment slot
<match game.blue.**>
  @type file
  path /fluentd/log/game-blue.%Y%m%d%H
  compress gzip
  <format>
    @type json
  </format>
  <buffer time>
    timekey 3600
    timekey_wait 1m
    chunk_limit_size 256m
    total_limit_size 2g
    flush_mode interval
    flush_interval 30s
  </buffer>
</match>

<match game.green.**>
  @type file
  path /fluentd/log/game-green.%Y%m%d%H
  compress gzip
  <format>
    @type json
  </format>
  <buffer time>
    timekey 3600
    timekey_wait 1m
    chunk_limit_size 256m
    total_limit_size 2g
    flush_mode interval
    flush_interval 30s
  </buffer>
</match>

# Output: Store infrastructure logs
<match docker.**>
  @type file
  path /fluentd/log/infrastructure.%Y%m%d%H
  compress gzip
  <format>
    @type json
  </format>
  <buffer time>
    timekey 3600
    timekey_wait 1m
    chunk_limit_size 256m
    total_limit_size 2g
    flush_mode interval
    flush_interval 30s
  </buffer>
</match>

# Output: Forward critical errors to monitoring system
<match {game,docker}.**>
  @type copy
  <store>
    @type stdout
    <format>
      @type json
    </format>
  </store>
  # Optional: Forward to external log aggregation service
  # <store>
  #   @type forward
  #   <server>
  #     name external-logs
  #     host external-log-service
  #     port 24224
  #   </server>
  # </store>
</match>

# Output: Catch-all for any unmatched logs
<match **>
  @type file
  path /fluentd/log/catch-all.%Y%m%d%H
  compress gzip
  <format>
    @type json
  </format>
  <buffer time>
    timekey 3600
    timekey_wait 1m
    chunk_limit_size 128m
    total_limit_size 1g
    flush_mode interval
    flush_interval 60s
  </buffer>
</match>