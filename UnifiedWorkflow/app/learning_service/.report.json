{"created": 1754963256.2760112, "duration": 0.40258097648620605, "exitcode": 1, "root": "/home/marku/AIWFE/app/learning_service", "environment": {}, "summary": {"error": 4, "total": 4, "collected": 4}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/unit", "type": "Dir"}, {"nodeid": "tests/integration", "type": "Dir"}]}, {"nodeid": "tests/unit/test_cognitive_processing.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_cognitive_processing.py::test_cognitive_processor_initialization", "type": "Function", "lineno": 6}, {"nodeid": "tests/unit/test_cognitive_processing.py::test_cognitive_processing_workflow", "type": "Function", "lineno": 10}]}, {"nodeid": "tests/unit", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_cognitive_processing.py", "type": "Module"}]}, {"nodeid": "tests/integration/test_service_integration.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_service_integration.py::test_learning_service_integration", "type": "Function", "lineno": 7}, {"nodeid": "tests/integration/test_service_integration.py::test_service_performance_mock", "type": "Function", "lineno": 19}]}, {"nodeid": "tests/integration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_service_integration.py", "type": "Module"}]}], "tests": [{"nodeid": "tests/unit/test_cognitive_processing.py::test_cognitive_processor_initialization", "lineno": 6, "outcome": "error", "keywords": ["test_cognitive_processor_initialization", "test_cognitive_processing.py", "unit", "tests", "learning_service", ""], "setup": {"duration": 0.01382868504151702, "outcome": "failed", "crash": {"path": "/home/marku/python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py", "lineno": 528, "message": "_pytest.nodes.Collector.CollectError: ImportError while importing test module '/home/marku/AIWFE/app/learning_service/tests/__init__.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   ModuleNotFoundError: No module named 'learning_service.tests'"}, "traceback": [{"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 344, "message": ""}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 246, "message": "in <lambda>"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_hooks.py", "lineno": 512, "message": "in __call__"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_manager.py", "lineno": 120, "message": "in _hookexec"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/logging.py", "lineno": 843, "message": "in pytest_runtest_setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py", "lineno": 53, "message": "in run_old_style_hookwrapper"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py", "lineno": 38, "message": "in run_old_style_hookwrapper"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/capture.py", "lineno": 895, "message": "in pytest_runtest_setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 164, "message": "in pytest_runtest_setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 514, "message": "in setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py", "lineno": 668, "message": "in setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py", "lineno": 528, "message": "CollectError"}], "longrepr": "name = 'learning_service.tests', package = None\n\n    def import_module(name, package=None):\n        \"\"\"Import a module.\n    \n        The 'package' argument is required when performing a relative import. It\n        specifies the package to use as the anchor point from which to resolve the\n        relative import to an absolute import.\n    \n        \"\"\"\n        level = 0\n        if name.startswith('.'):\n            if not package:\n                raise TypeError(\"the 'package' argument is required to perform a \"\n                                f\"relative import for {name!r}\")\n            for character in name:\n                if character != '.':\n                    break\n                level += 1\n>       return _bootstrap._gcd_import(name[level:], package, level)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       ModuleNotFoundError: No module named 'learning_service.tests'\n\n/usr/lib/python3.12/importlib/__init__.py:90: ModuleNotFoundError\n\nThe above exception was the direct cause of the following exception:\n\ncls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_and_report.<locals>.<lambda> at 0x7cc8461787c0>\nwhen = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,\n    ) -> CallInfo[TResult]:\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :type func: Callable[[], _pytest.runner.TResult]\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        instant = timing.Instant()\n        try:\n>           result: TResult | None = func()\n                                     ^^^^^^\n\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:246: in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_hooks.py:512: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/logging.py:843: in pytest_runtest_setup\n    yield\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py:53: in run_old_style_hookwrapper\n    return result.get_result()\n           ^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py:38: in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/capture.py:895: in pytest_runtest_setup\n    return (yield)\n            ^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:164: in pytest_runtest_setup\n    item.session._setupstate.setup(item)\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:514: in setup\n    col.setup()\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py:668: in setup\n    init_mod = importtestmodule(self.path / \"__init__.py\", self.config)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npath = PosixPath('/home/marku/AIWFE/app/learning_service/tests/__init__.py')\nconfig = <_pytest.config.Config object at 0x7cc846d551c0>\n\n    def importtestmodule(\n        path: Path,\n        config: Config,\n    ):\n        # We assume we are only called once per module.\n        importmode = config.getoption(\"--import-mode\")\n        try:\n            mod = import_path(\n                path,\n                mode=importmode,\n                root=config.rootpath,\n                consider_namespace_packages=config.getini(\"consider_namespace_packages\"),\n            )\n        except SyntaxError as e:\n            raise nodes.Collector.CollectError(\n                ExceptionInfo.from_current().getrepr(style=\"short\")\n            ) from e\n        except ImportPathMismatchError as e:\n            raise nodes.Collector.CollectError(\n                \"import file mismatch:\\n\"\n                \"imported module {!r} has this __file__ attribute:\\n\"\n                \"  {}\\n\"\n                \"which is not the same as the test file we want to collect:\\n\"\n                \"  {}\\n\"\n                \"HINT: remove __pycache__ / .pyc files and/or use a \"\n                \"unique basename for your test file modules\".format(*e.args)\n            ) from e\n        except ImportError as e:\n            exc_info = ExceptionInfo.from_current()\n            if config.get_verbosity() < 2:\n                exc_info.traceback = exc_info.traceback.filter(filter_traceback)\n            exc_repr = (\n                exc_info.getrepr(style=\"short\")\n                if exc_info.traceback\n                else exc_info.exconly()\n            )\n            formatted_tb = str(exc_repr)\n>           raise nodes.Collector.CollectError(\n                f\"ImportError while importing test module '{path}'.\\n\"\n                \"Hint: make sure your test modules/packages have valid Python names.\\n\"\n                \"Traceback:\\n\"\n                f\"{formatted_tb}\"\n            ) from e\nE           _pytest.nodes.Collector.CollectError: ImportError while importing test module '/home/marku/AIWFE/app/learning_service/tests/__init__.py'.\nE           Hint: make sure your test modules/packages have valid Python names.\nE           Traceback:\nE           /usr/lib/python3.12/importlib/__init__.py:90: in import_module\nE               return _bootstrap._gcd_import(name[level:], package, level)\nE                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           E   ModuleNotFoundError: No module named 'learning_service.tests'\n\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py:528: CollectError"}, "teardown": {"duration": 0.00019149802392348647, "outcome": "passed"}}, {"nodeid": "tests/unit/test_cognitive_processing.py::test_cognitive_processing_workflow", "lineno": 10, "outcome": "error", "keywords": ["test_cognitive_processing_workflow", "test_cognitive_processing.py", "unit", "tests", "learning_service", ""], "setup": {"duration": 0.00013429601676762104, "outcome": "failed", "crash": {"path": "/home/marku/python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py", "lineno": 528, "message": "_pytest.nodes.Collector.CollectError: ImportError while importing test module '/home/marku/AIWFE/app/learning_service/tests/__init__.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   ModuleNotFoundError: No module named 'learning_service.tests'"}, "traceback": [{"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 344, "message": ""}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 246, "message": "in <lambda>"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_hooks.py", "lineno": 512, "message": "in __call__"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_manager.py", "lineno": 120, "message": "in _hookexec"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/logging.py", "lineno": 843, "message": "in pytest_runtest_setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py", "lineno": 53, "message": "in run_old_style_hookwrapper"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py", "lineno": 38, "message": "in run_old_style_hookwrapper"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/capture.py", "lineno": 895, "message": "in pytest_runtest_setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 164, "message": "in pytest_runtest_setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 507, "message": "in setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 514, "message": "in setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py", "lineno": 668, "message": "in setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py", "lineno": 528, "message": "CollectError"}], "longrepr": "name = 'learning_service.tests', package = None\n\n    def import_module(name, package=None):\n        \"\"\"Import a module.\n    \n        The 'package' argument is required when performing a relative import. It\n        specifies the package to use as the anchor point from which to resolve the\n        relative import to an absolute import.\n    \n        \"\"\"\n        level = 0\n        if name.startswith('.'):\n            if not package:\n                raise TypeError(\"the 'package' argument is required to perform a \"\n                                f\"relative import for {name!r}\")\n            for character in name:\n                if character != '.':\n                    break\n                level += 1\n>       return _bootstrap._gcd_import(name[level:], package, level)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       ModuleNotFoundError: No module named 'learning_service.tests'\n\n/usr/lib/python3.12/importlib/__init__.py:90: ModuleNotFoundError\n\nThe above exception was the direct cause of the following exception:\n\ncls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_and_report.<locals>.<lambda> at 0x7cc8461dfce0>\nwhen = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,\n    ) -> CallInfo[TResult]:\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :type func: Callable[[], _pytest.runner.TResult]\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        instant = timing.Instant()\n        try:\n>           result: TResult | None = func()\n                                     ^^^^^^\n\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:246: in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_hooks.py:512: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/logging.py:843: in pytest_runtest_setup\n    yield\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py:53: in run_old_style_hookwrapper\n    return result.get_result()\n           ^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py:38: in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/capture.py:895: in pytest_runtest_setup\n    return (yield)\n            ^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:164: in pytest_runtest_setup\n    item.session._setupstate.setup(item)\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:507: in setup\n    raise exc[0].with_traceback(exc[1])\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:514: in setup\n    col.setup()\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py:668: in setup\n    init_mod = importtestmodule(self.path / \"__init__.py\", self.config)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npath = PosixPath('/home/marku/AIWFE/app/learning_service/tests/__init__.py')\nconfig = <_pytest.config.Config object at 0x7cc846d551c0>\n\n    def importtestmodule(\n        path: Path,\n        config: Config,\n    ):\n        # We assume we are only called once per module.\n        importmode = config.getoption(\"--import-mode\")\n        try:\n            mod = import_path(\n                path,\n                mode=importmode,\n                root=config.rootpath,\n                consider_namespace_packages=config.getini(\"consider_namespace_packages\"),\n            )\n        except SyntaxError as e:\n            raise nodes.Collector.CollectError(\n                ExceptionInfo.from_current().getrepr(style=\"short\")\n            ) from e\n        except ImportPathMismatchError as e:\n            raise nodes.Collector.CollectError(\n                \"import file mismatch:\\n\"\n                \"imported module {!r} has this __file__ attribute:\\n\"\n                \"  {}\\n\"\n                \"which is not the same as the test file we want to collect:\\n\"\n                \"  {}\\n\"\n                \"HINT: remove __pycache__ / .pyc files and/or use a \"\n                \"unique basename for your test file modules\".format(*e.args)\n            ) from e\n        except ImportError as e:\n            exc_info = ExceptionInfo.from_current()\n            if config.get_verbosity() < 2:\n                exc_info.traceback = exc_info.traceback.filter(filter_traceback)\n            exc_repr = (\n                exc_info.getrepr(style=\"short\")\n                if exc_info.traceback\n                else exc_info.exconly()\n            )\n            formatted_tb = str(exc_repr)\n>           raise nodes.Collector.CollectError(\n                f\"ImportError while importing test module '{path}'.\\n\"\n                \"Hint: make sure your test modules/packages have valid Python names.\\n\"\n                \"Traceback:\\n\"\n                f\"{formatted_tb}\"\n            ) from e\nE           _pytest.nodes.Collector.CollectError: ImportError while importing test module '/home/marku/AIWFE/app/learning_service/tests/__init__.py'.\nE           Hint: make sure your test modules/packages have valid Python names.\nE           Traceback:\nE           /usr/lib/python3.12/importlib/__init__.py:90: in import_module\nE               return _bootstrap._gcd_import(name[level:], package, level)\nE                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           E   ModuleNotFoundError: No module named 'learning_service.tests'\n\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py:528: CollectError"}, "teardown": {"duration": 0.00018849701154977083, "outcome": "passed"}}, {"nodeid": "tests/integration/test_service_integration.py::test_learning_service_integration", "lineno": 7, "outcome": "error", "keywords": ["test_learning_service_integration", "test_service_integration.py", "integration", "tests", "learning_service", ""], "setup": {"duration": 0.00014151103096082807, "outcome": "failed", "crash": {"path": "/home/marku/python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py", "lineno": 528, "message": "_pytest.nodes.Collector.CollectError: ImportError while importing test module '/home/marku/AIWFE/app/learning_service/tests/__init__.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   ModuleNotFoundError: No module named 'learning_service.tests'"}, "traceback": [{"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 344, "message": ""}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 246, "message": "in <lambda>"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_hooks.py", "lineno": 512, "message": "in __call__"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_manager.py", "lineno": 120, "message": "in _hookexec"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/logging.py", "lineno": 843, "message": "in pytest_runtest_setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py", "lineno": 53, "message": "in run_old_style_hookwrapper"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py", "lineno": 38, "message": "in run_old_style_hookwrapper"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/capture.py", "lineno": 895, "message": "in pytest_runtest_setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 164, "message": "in pytest_runtest_setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 507, "message": "in setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 514, "message": "in setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py", "lineno": 668, "message": "in setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py", "lineno": 528, "message": "CollectError"}], "longrepr": "name = 'learning_service.tests', package = None\n\n    def import_module(name, package=None):\n        \"\"\"Import a module.\n    \n        The 'package' argument is required when performing a relative import. It\n        specifies the package to use as the anchor point from which to resolve the\n        relative import to an absolute import.\n    \n        \"\"\"\n        level = 0\n        if name.startswith('.'):\n            if not package:\n                raise TypeError(\"the 'package' argument is required to perform a \"\n                                f\"relative import for {name!r}\")\n            for character in name:\n                if character != '.':\n                    break\n                level += 1\n>       return _bootstrap._gcd_import(name[level:], package, level)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       ModuleNotFoundError: No module named 'learning_service.tests'\n\n/usr/lib/python3.12/importlib/__init__.py:90: ModuleNotFoundError\n\nThe above exception was the direct cause of the following exception:\n\ncls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_and_report.<locals>.<lambda> at 0x7cc8461e9a80>\nwhen = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,\n    ) -> CallInfo[TResult]:\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :type func: Callable[[], _pytest.runner.TResult]\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        instant = timing.Instant()\n        try:\n>           result: TResult | None = func()\n                                     ^^^^^^\n\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:246: in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_hooks.py:512: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/logging.py:843: in pytest_runtest_setup\n    yield\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py:53: in run_old_style_hookwrapper\n    return result.get_result()\n           ^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py:38: in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/capture.py:895: in pytest_runtest_setup\n    return (yield)\n            ^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:164: in pytest_runtest_setup\n    item.session._setupstate.setup(item)\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:507: in setup\n    raise exc[0].with_traceback(exc[1])\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:514: in setup\n    col.setup()\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py:668: in setup\n    init_mod = importtestmodule(self.path / \"__init__.py\", self.config)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npath = PosixPath('/home/marku/AIWFE/app/learning_service/tests/__init__.py')\nconfig = <_pytest.config.Config object at 0x7cc846d551c0>\n\n    def importtestmodule(\n        path: Path,\n        config: Config,\n    ):\n        # We assume we are only called once per module.\n        importmode = config.getoption(\"--import-mode\")\n        try:\n            mod = import_path(\n                path,\n                mode=importmode,\n                root=config.rootpath,\n                consider_namespace_packages=config.getini(\"consider_namespace_packages\"),\n            )\n        except SyntaxError as e:\n            raise nodes.Collector.CollectError(\n                ExceptionInfo.from_current().getrepr(style=\"short\")\n            ) from e\n        except ImportPathMismatchError as e:\n            raise nodes.Collector.CollectError(\n                \"import file mismatch:\\n\"\n                \"imported module {!r} has this __file__ attribute:\\n\"\n                \"  {}\\n\"\n                \"which is not the same as the test file we want to collect:\\n\"\n                \"  {}\\n\"\n                \"HINT: remove __pycache__ / .pyc files and/or use a \"\n                \"unique basename for your test file modules\".format(*e.args)\n            ) from e\n        except ImportError as e:\n            exc_info = ExceptionInfo.from_current()\n            if config.get_verbosity() < 2:\n                exc_info.traceback = exc_info.traceback.filter(filter_traceback)\n            exc_repr = (\n                exc_info.getrepr(style=\"short\")\n                if exc_info.traceback\n                else exc_info.exconly()\n            )\n            formatted_tb = str(exc_repr)\n>           raise nodes.Collector.CollectError(\n                f\"ImportError while importing test module '{path}'.\\n\"\n                \"Hint: make sure your test modules/packages have valid Python names.\\n\"\n                \"Traceback:\\n\"\n                f\"{formatted_tb}\"\n            ) from e\nE           _pytest.nodes.Collector.CollectError: ImportError while importing test module '/home/marku/AIWFE/app/learning_service/tests/__init__.py'.\nE           Hint: make sure your test modules/packages have valid Python names.\nE           Traceback:\nE           /usr/lib/python3.12/importlib/__init__.py:90: in import_module\nE               return _bootstrap._gcd_import(name[level:], package, level)\nE                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           E   ModuleNotFoundError: No module named 'learning_service.tests'\n\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py:528: CollectError"}, "teardown": {"duration": 0.0001701940200291574, "outcome": "passed"}}, {"nodeid": "tests/integration/test_service_integration.py::test_service_performance_mock", "lineno": 19, "outcome": "error", "keywords": ["test_service_performance_mock", "test_service_integration.py", "integration", "tests", "learning_service", ""], "setup": {"duration": 0.0001270839711651206, "outcome": "failed", "crash": {"path": "/home/marku/python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py", "lineno": 528, "message": "_pytest.nodes.Collector.CollectError: ImportError while importing test module '/home/marku/AIWFE/app/learning_service/tests/__init__.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   ModuleNotFoundError: No module named 'learning_service.tests'"}, "traceback": [{"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 344, "message": ""}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 246, "message": "in <lambda>"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_hooks.py", "lineno": 512, "message": "in __call__"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_manager.py", "lineno": 120, "message": "in _hookexec"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/logging.py", "lineno": 843, "message": "in pytest_runtest_setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py", "lineno": 53, "message": "in run_old_style_hookwrapper"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py", "lineno": 38, "message": "in run_old_style_hookwrapper"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/capture.py", "lineno": 895, "message": "in pytest_runtest_setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 164, "message": "in pytest_runtest_setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 507, "message": "in setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py", "lineno": 514, "message": "in setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py", "lineno": 668, "message": "in setup"}, {"path": "../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py", "lineno": 528, "message": "CollectError"}], "longrepr": "name = 'learning_service.tests', package = None\n\n    def import_module(name, package=None):\n        \"\"\"Import a module.\n    \n        The 'package' argument is required when performing a relative import. It\n        specifies the package to use as the anchor point from which to resolve the\n        relative import to an absolute import.\n    \n        \"\"\"\n        level = 0\n        if name.startswith('.'):\n            if not package:\n                raise TypeError(\"the 'package' argument is required to perform a \"\n                                f\"relative import for {name!r}\")\n            for character in name:\n                if character != '.':\n                    break\n                level += 1\n>       return _bootstrap._gcd_import(name[level:], package, level)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       ModuleNotFoundError: No module named 'learning_service.tests'\n\n/usr/lib/python3.12/importlib/__init__.py:90: ModuleNotFoundError\n\nThe above exception was the direct cause of the following exception:\n\ncls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_and_report.<locals>.<lambda> at 0x7cc8461eab60>\nwhen = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,\n    ) -> CallInfo[TResult]:\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :type func: Callable[[], _pytest.runner.TResult]\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        instant = timing.Instant()\n        try:\n>           result: TResult | None = func()\n                                     ^^^^^^\n\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:246: in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_hooks.py:512: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/logging.py:843: in pytest_runtest_setup\n    yield\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py:53: in run_old_style_hookwrapper\n    return result.get_result()\n           ^^^^^^^^^^^^^^^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/pluggy/_callers.py:38: in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/capture.py:895: in pytest_runtest_setup\n    return (yield)\n            ^^^^^\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:164: in pytest_runtest_setup\n    item.session._setupstate.setup(item)\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:507: in setup\n    raise exc[0].with_traceback(exc[1])\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/runner.py:514: in setup\n    col.setup()\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py:668: in setup\n    init_mod = importtestmodule(self.path / \"__init__.py\", self.config)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npath = PosixPath('/home/marku/AIWFE/app/learning_service/tests/__init__.py')\nconfig = <_pytest.config.Config object at 0x7cc846d551c0>\n\n    def importtestmodule(\n        path: Path,\n        config: Config,\n    ):\n        # We assume we are only called once per module.\n        importmode = config.getoption(\"--import-mode\")\n        try:\n            mod = import_path(\n                path,\n                mode=importmode,\n                root=config.rootpath,\n                consider_namespace_packages=config.getini(\"consider_namespace_packages\"),\n            )\n        except SyntaxError as e:\n            raise nodes.Collector.CollectError(\n                ExceptionInfo.from_current().getrepr(style=\"short\")\n            ) from e\n        except ImportPathMismatchError as e:\n            raise nodes.Collector.CollectError(\n                \"import file mismatch:\\n\"\n                \"imported module {!r} has this __file__ attribute:\\n\"\n                \"  {}\\n\"\n                \"which is not the same as the test file we want to collect:\\n\"\n                \"  {}\\n\"\n                \"HINT: remove __pycache__ / .pyc files and/or use a \"\n                \"unique basename for your test file modules\".format(*e.args)\n            ) from e\n        except ImportError as e:\n            exc_info = ExceptionInfo.from_current()\n            if config.get_verbosity() < 2:\n                exc_info.traceback = exc_info.traceback.filter(filter_traceback)\n            exc_repr = (\n                exc_info.getrepr(style=\"short\")\n                if exc_info.traceback\n                else exc_info.exconly()\n            )\n            formatted_tb = str(exc_repr)\n>           raise nodes.Collector.CollectError(\n                f\"ImportError while importing test module '{path}'.\\n\"\n                \"Hint: make sure your test modules/packages have valid Python names.\\n\"\n                \"Traceback:\\n\"\n                f\"{formatted_tb}\"\n            ) from e\nE           _pytest.nodes.Collector.CollectError: ImportError while importing test module '/home/marku/AIWFE/app/learning_service/tests/__init__.py'.\nE           Hint: make sure your test modules/packages have valid Python names.\nE           Traceback:\nE           /usr/lib/python3.12/importlib/__init__.py:90: in import_module\nE               return _bootstrap._gcd_import(name[level:], package, level)\nE                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           E   ModuleNotFoundError: No module named 'learning_service.tests'\n\n../../../python_tools/gemini/lib/python3.12/site-packages/_pytest/python.py:528: CollectError"}, "teardown": {"duration": 0.00017497199587523937, "outcome": "passed"}}]}