# webui/Dockerfile - Optimized for faster builds
# ==================================
# Stage 1: The Builder
# ==================================
FROM node:20-alpine AS builder

# Set the working directory for the build
WORKDIR /app

# Install build dependencies
RUN apk --no-cache add git

# Copy only package files first for better Docker layer caching
COPY package*.json ./

# Set npm configuration for faster installs
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set fetch-retries 3 && \
    npm config set fetch-retry-factor 10 && \
    npm config set fetch-retry-mintimeout 10000 && \
    npm config set fetch-retry-maxtimeout 60000

# Install dependencies with optimizations
RUN npm ci --only=production=false --prefer-offline --no-audit --progress=false

# Copy source code
COPY . .

# Set Node.js memory limit and build with optimizations
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV VITE_BUILD_SOURCEMAP=false
ENV VITE_BUILD_MINIFY=true

# Build the application
RUN npm run build

# Clean up build dependencies
RUN npm prune --production && \
    npm cache clean --force

# ==================================
# Stage 2: The Runtime
# ==================================
FROM node:20-alpine AS runtime

WORKDIR /app

# Set production environment
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=1024"

# Copy the successfully built application from the builder stage
COPY --from=builder /app/build ./build
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 && \
    chown -R nextjs:nodejs /app

USER nextjs

# Expose the port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
CMD ["node", "build/index.js"]