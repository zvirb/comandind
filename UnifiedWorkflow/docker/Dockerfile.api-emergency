# Emergency API Dockerfile with direct bcrypt installation
# This bypasses Poetry issues and ensures bcrypt is available
FROM python:3.11-slim

# Set environment variables to prevent Python from writing .pyc files
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PYTHONPATH=/app
# Add shared module to Python path for cross-service imports
ENV PYTHONPATH=/app:/app/shared

# Install system dependencies
# - build-essential: for compiling some Python packages
# - postgresql-client: for the `psql` command used in run-migrate.sh
# - curl & gcc: to build su-exec for privilege dropping
# - libffi-dev & libssl-dev: for bcrypt compilation
# - pkg-config: for package configuration
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    postgresql-client \
    curl \
    gcc \
    libffi-dev \
    libssl-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Install su-exec, used by the entrypoint-wrapper.sh script
RUN curl -sSL https://github.com/ncopa/su-exec/archive/master.tar.gz | tar xz -C /tmp \
    && make -C /tmp/su-exec-master \
    && mv /tmp/su-exec-master/su-exec /usr/local/bin/ \
    && rm -rf /tmp/su-exec-master

# Create a non-root user and group
RUN addgroup --system app && adduser --system --ingroup app app

WORKDIR /app

# Copy the entire project
COPY . /app

# EMERGENCY FIX: Install bcrypt and pwdlib directly with pip first
RUN pip install --no-cache-dir bcrypt==4.1.2 pwdlib[argon2,bcrypt]==0.2.1

# Install Poetry and dependencies
RUN pip install --no-cache-dir poetry && \
    poetry config virtualenvs.create false

# Try Poetry install first, fallback to pip if needed
RUN poetry install --no-interaction --no-ansi --no-root || \
    (poetry export -f requirements.txt --without-hashes > requirements.txt && \
     pip install --no-cache-dir -r requirements.txt)

# Set permissions
RUN chown -R app:app /app

# Add import health check script
COPY docker/api/import_health_check.py /app/import_health_check.py

# Test bcrypt import to ensure it works
RUN python -c "from pwdlib.hashers.bcrypt import BcryptHasher; print('bcrypt import successful')"

# Expose port
EXPOSE 8000

# Use the existing entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint-wrapper.sh"]
CMD ["sh", "-c", "exec /usr/local/bin/run.sh"]