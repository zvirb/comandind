{
  "name": "mcp-memory-server",
  "version": "1.0.0",
  "description": "Memory MCP server for persistent agent output storage and retrieval",
  "type": "memory",
  "configuration": {
    "storage_backend": "sqlite",
    "database_path": "./.mcp/memory.db",
    "entity_types": [
      "agent-output",
      "context-package",
      "documentation",
      "workflow-state",
      "strategic-plan",
      "validation-evidence"
    ],
    "max_entity_size": 8000,
    "compression": true,
    "backup_enabled": true,
    "backup_interval": "1h"
  },
  "capabilities": {
    "create_entities": {
      "description": "Store agent outputs and context packages",
      "parameters": {
        "entities": {
          "type": "array",
          "items": {
            "name": "string (required)",
            "entityType": "string (required)", 
            "observations": "array of strings (required)",
            "metadata": "object (optional)"
          }
        }
      },
      "example": {
        "entities": [{
          "name": "backend-gateway-expert-routing-config-20250119-143000",
          "entityType": "agent-output",
          "observations": [
            "Created nginx gateway configuration with load balancing",
            "Implemented rate limiting at 1000 requests per minute",
            "Added health check endpoints for all microservices"
          ],
          "metadata": {
            "agent": "backend-gateway-expert",
            "phase": "5",
            "stream": "backend",
            "timestamp": "2025-01-19T14:30:00Z"
          }
        }]
      }
    },
    "search_nodes": {
      "description": "Query stored entities by content and metadata",
      "parameters": {
        "query": "string (required)",
        "entity_type": "string (optional)",
        "limit": "number (optional, default: 10)"
      },
      "example": {
        "query": "agent output backend routing configuration",
        "entity_type": "agent-output",
        "limit": 5
      }
    },
    "get_entities": {
      "description": "Retrieve specific entities by name or ID",
      "parameters": {
        "entity_names": "array of strings (required)"
      }
    },
    "update_entities": {
      "description": "Update existing entities with new observations",
      "parameters": {
        "updates": "array of entity updates"
      }
    },
    "delete_entities": {
      "description": "Remove entities from memory storage",
      "parameters": {
        "entity_names": "array of strings (required)"
      }
    }
  },
  "naming_conventions": {
    "pattern": "{agent-name}-{output-type}-{YYYYMMDD-HHMMSS}",
    "examples": [
      "project-orchestrator-strategic-plan-20250119-140000",
      "security-validator-audit-report-20250119-141500",
      "ui-architect-component-design-20250119-143000",
      "orchestration-auditor-workflow-analysis-20250119-145000"
    ],
    "entity_types": {
      "agent-output": "Results and findings from specialist agents",
      "context-package": "Compressed context for agent coordination",
      "documentation": "System documentation and specifications",
      "workflow-state": "Orchestration workflow checkpoints",
      "strategic-plan": "High-level implementation strategies",
      "validation-evidence": "Evidence from validation and testing phases"
    }
  },
  "integration": {
    "claude_tools": [
      "mcp__memory__create_entities",
      "mcp__memory__search_nodes", 
      "mcp__memory__get_entities",
      "mcp__memory__update_entities",
      "mcp__memory__delete_entities"
    ],
    "workflow_phases": {
      "phase_1": "Store agent ecosystem validation results",
      "phase_2": "Store strategic plans and coordination strategies",
      "phase_4": "Store compressed context packages",
      "phase_5": "Store implementation outputs from all streams",
      "phase_6": "Store validation evidence and test results",
      "phase_9": "Store workflow analysis and learning outcomes"
    }
  },
  "storage_optimization": {
    "compression": "gzip",
    "deduplication": true,
    "indexing": ["agent", "entityType", "timestamp", "phase"],
    "retention_policy": {
      "agent-output": "30 days",
      "context-package": "7 days",
      "documentation": "indefinite",
      "workflow-state": "14 days",
      "strategic-plan": "indefinite",
      "validation-evidence": "30 days"
    }
  },
  "error_handling": {
    "max_retries": 3,
    "timeout": 30000,
    "fallback": "local_file_storage",
    "corruption_detection": true,
    "auto_repair": true
  }
}