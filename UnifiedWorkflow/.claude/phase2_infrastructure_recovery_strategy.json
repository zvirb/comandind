{
  "mission": "Critical Infrastructure Recovery - Achieve 95% System Health",
  "timestamp": "2025-08-16T10:00:00Z",
  "iteration": 6,
  "critical_context": {
    "unhealthy_services": [
      {
        "service": "health-monitor",
        "issue": "ValueError at line 487 - missing content_type",
        "fix": "Add content_type='application/json' to Response",
        "priority": "CRITICAL",
        "complexity": "SIMPLE"
      },
      {
        "service": "perception-service",
        "issue": "18 hours unhealthy - requires investigation",
        "potential_causes": ["database connection", "configuration", "dependencies"],
        "priority": "CRITICAL",
        "complexity": "UNKNOWN"
      }
    ],
    "automation_available": {
      "script": "/scripts/activate_service_recovery.py",
      "capabilities": ["container rebuild", "health monitoring", "rollback"],
      "status": "READY"
    },
    "system_impact": "5% degradation blocking production readiness"
  },
  
  "strategic_approach": {
    "methodology": "TARGETED_FIX_WITH_AUTOMATION",
    "rationale": "Leverage identified fixes and automation for rapid recovery",
    "risk_level": "LOW_TO_MEDIUM",
    "estimated_duration": "2-3 hours",
    "rollback_capability": true
  },
  
  "recovery_phases": {
    "phase_A": {
      "name": "Immediate Health-Monitor Fix",
      "objectives": [
        "Fix ValueError in health-monitor service",
        "Verify fix with local testing",
        "Prepare for container rebuild"
      ],
      "specialists": ["backend-gateway-expert"],
      "duration": "15 minutes",
      "validation": "Service returns 200 OK on /metrics",
      "evidence_required": ["Code diff", "Test output", "Health check response"]
    },
    
    "phase_B": {
      "name": "Automated Container Recovery",
      "objectives": [
        "Execute activate_service_recovery.py",
        "Monitor rebuild progress",
        "Verify container health status"
      ],
      "specialists": ["infrastructure-orchestrator", "monitoring-analyst"],
      "duration": "30 minutes",
      "validation": "All containers showing healthy status",
      "evidence_required": ["Docker ps output", "Container logs", "Health endpoints"]
    },
    
    "phase_C": {
      "name": "Perception Service Investigation",
      "objectives": [
        "Analyze perception-service logs",
        "Check database connectivity",
        "Identify and fix root cause",
        "Rebuild if necessary"
      ],
      "specialists": ["backend-gateway-expert", "schema-database-expert"],
      "duration": "45 minutes",
      "validation": "Perception service responding to health checks",
      "evidence_required": ["Log analysis", "Database connection test", "Service response"]
    },
    
    "phase_D": {
      "name": "Neo4j Configuration",
      "objectives": [
        "Configure Neo4j authentication",
        "Update learning service environment",
        "Test graph database connectivity"
      ],
      "specialists": ["schema-database-expert"],
      "duration": "20 minutes",
      "validation": "Learning service connects to Neo4j successfully",
      "evidence_required": ["Neo4j connection test", "Learning service logs"]
    },
    
    "phase_E": {
      "name": "Comprehensive Validation",
      "objectives": [
        "Verify all services healthy",
        "Collect production evidence",
        "Confirm 95% system health achieved"
      ],
      "specialists": ["production-endpoint-validator", "monitoring-analyst"],
      "duration": "30 minutes",
      "validation": "Full system operational with evidence",
      "evidence_required": ["Health dashboard screenshot", "All service endpoints", "Metrics verification"]
    }
  },
  
  "specialist_coordination": {
    "parallel_execution": {
      "stream_1": {
        "phase": "A",
        "agents": ["backend-gateway-expert"],
        "focus": "Health-monitor fix"
      },
      "stream_2": {
        "phase": "B-C",
        "agents": ["infrastructure-orchestrator", "backend-gateway-expert"],
        "focus": "Container recovery and perception investigation"
      },
      "stream_3": {
        "phase": "D",
        "agents": ["schema-database-expert"],
        "focus": "Neo4j configuration"
      },
      "stream_4": {
        "phase": "E",
        "agents": ["production-endpoint-validator", "monitoring-analyst"],
        "focus": "Evidence collection and validation"
      }
    },
    
    "context_packages": {
      "backend_gateway_package": {
        "focus": "Service fixes and container management",
        "max_tokens": 3500,
        "priority_info": ["health-monitor fix", "perception-service logs", "container rebuild"]
      },
      "infrastructure_package": {
        "focus": "Automation execution and monitoring",
        "max_tokens": 3000,
        "priority_info": ["recovery script usage", "container orchestration", "rollback procedures"]
      },
      "database_package": {
        "focus": "Database connectivity and Neo4j setup",
        "max_tokens": 3000,
        "priority_info": ["perception DB connection", "Neo4j auth config", "connection testing"]
      },
      "validation_package": {
        "focus": "Evidence collection and health verification",
        "max_tokens": 3500,
        "priority_info": ["endpoint testing", "screenshot capture", "metrics validation"]
      }
    }
  },
  
  "success_criteria": {
    "mandatory": [
      "health-monitor service returns 200 OK",
      "perception-service health check passes",
      "All Docker containers show healthy status",
      "Neo4j authentication configured",
      "95% system health metric achieved"
    ],
    "evidence_requirements": [
      "Screenshot of health dashboard showing all green",
      "Docker ps output showing all containers healthy",
      "Curl responses from all critical endpoints",
      "Learning service Neo4j connection logs",
      "Metrics endpoint showing system health >= 95%"
    ],
    "validation_gates": {
      "gate_1": "Health-monitor fix verified locally",
      "gate_2": "Container rebuilds completed successfully",
      "gate_3": "Perception-service operational",
      "gate_4": "Neo4j connectivity established",
      "gate_5": "Full system validation passed"
    }
  },
  
  "risk_mitigation": {
    "identified_risks": [
      {
        "risk": "Container rebuild failure",
        "mitigation": "Use rollback capability in recovery script",
        "severity": "MEDIUM"
      },
      {
        "risk": "Perception-service complex issue",
        "mitigation": "Escalate to deep debugging if not resolved in 45 min",
        "severity": "MEDIUM"
      },
      {
        "risk": "Neo4j auth conflicts",
        "mitigation": "Backup existing config before changes",
        "severity": "LOW"
      }
    ],
    "rollback_procedures": {
      "container_rollback": "activate_service_recovery.py --rollback",
      "config_rollback": "Git revert configuration changes",
      "service_rollback": "Docker-compose down && docker-compose up -d"
    }
  },
  
  "automation_strategy": {
    "primary_tool": "/scripts/activate_service_recovery.py",
    "execution_parameters": {
      "rebuild_unhealthy": true,
      "monitor_progress": true,
      "enable_rollback": true,
      "timeout": 1800
    },
    "monitoring": {
      "log_collection": "Aggregate all service logs during recovery",
      "health_polling": "Check health endpoints every 30 seconds",
      "alert_threshold": "Alert if any service unhealthy > 5 minutes"
    }
  },
  
  "deliverables": {
    "immediate": [
      "Health-monitor service fix deployed",
      "Perception-service operational"
    ],
    "short_term": [
      "All containers rebuilt and healthy",
      "Neo4j fully configured",
      "95% system health achieved"
    ],
    "evidence": [
      "Complete health dashboard screenshot",
      "Service endpoint validation report",
      "Container status documentation",
      "Recovery execution logs"
    ]
  },
  
  "execution_command": {
    "initiate": "Main Claude to coordinate specialist execution per phase sequence",
    "priority": "CRITICAL - Begin Phase A immediately",
    "coordination": "Parallel streams where indicated, sequential validation gates",
    "completion_target": "2-3 hours from initiation"
  }
}