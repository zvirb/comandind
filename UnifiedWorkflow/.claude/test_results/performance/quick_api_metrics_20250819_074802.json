{
  "timestamp": "2025-08-19T07:48:02.549301",
  "api_performance": {
    "/api/v1/health": {
      "avg_response_time_ms": 37.03031539916992,
      "min_response_time_ms": 26.38864517211914,
      "max_response_time_ms": 45.206308364868164,
      "median_response_time_ms": 42.592763900756836,
      "success_rate": 100.0,
      "response_times": [
        26.38864517211914,
        44.32559013366699,
        42.592763900756836,
        45.206308364868164,
        26.638269424438477
      ]
    },
    "/api/v1/health/integration": {
      "avg_response_time_ms": 43.20039749145508,
      "min_response_time_ms": 34.03735160827637,
      "max_response_time_ms": 48.71201515197754,
      "median_response_time_ms": 43.900251388549805,
      "success_rate": 100.0,
      "response_times": [
        46.33951187133789,
        48.71201515197754,
        34.03735160827637,
        43.01285743713379,
        43.900251388549805
      ]
    },
    "/api/v1/session/validate": {
      "avg_response_time_ms": 41.90635681152344,
      "min_response_time_ms": 29.215335845947266,
      "max_response_time_ms": 49.790143966674805,
      "median_response_time_ms": 47.934770584106445,
      "success_rate": 100.0,
      "response_times": [
        29.215335845947266,
        47.934770584106445,
        49.28421974182129,
        49.790143966674805,
        33.30731391906738
      ]
    }
  },
  "docker_metrics": {
    "docker_stats": [
      "CONTAINER      CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O",
      "2ae79344cb0c   0.13%     57.04MiB / 31.23GiB   0.18%     20.4MB / 72.6MB   139MB / 86.4MB",
      "dbf513186f42   0.01%     10.32MiB / 31.23GiB   0.03%     58MB / 15.5MB     12.7MB / 606kB",
      "1a46c056a2a6   0.18%     33.37MiB / 31.23GiB   0.10%     34.1MB / 47.6MB   139MB / 16.2MB",
      "ab6d60e05383   0.22%     374MiB / 31.23GiB     1.17%     13.8MB / 91.8MB   48.7GB / 3.21GB",
      "6f24dc919847   0.14%     71.41MiB / 31.23GiB   0.22%     18.3MB / 6.67MB   144MB / 118MB",
      "1d97f0059af5   0.16%     65.72MiB / 31.23GiB   0.21%     7.31MB / 2.98MB   112MB / 49.9MB",
      "bb70d4bca828   4.20%     97.23MiB / 31.23GiB   0.30%     260MB / 30MB      434MB / 334MB",
      "a5698a71c350   0.00%     19.91MiB / 31.23GiB   0.06%     3.03MB / 2.22MB   92.1MB / 6.68MB",
      "9cee78d5d3e5   0.14%     70.61MiB / 31.23GiB   0.22%     2.78MB / 3.35MB   126MB / 41.3MB",
      "4a553535f17b   1.32%     107.4MiB / 31.23GiB   0.34%     68.1MB / 53.2MB   412MB / 244MB",
      "412fda4c2f4f   0.15%     49.37MiB / 31.23GiB   0.15%     49MB / 42.8MB     175MB / 73.1MB",
      "8ff440c06ce7   0.00%     20.5MiB / 31.23GiB    0.06%     1.45MB / 5.53MB   39.5MB / 8.17MB",
      "f756b8225974   0.00%     24.82MiB / 31.23GiB   0.08%     4MB / 9.41MB      36.6MB / 9.31MB",
      "7862fb0bb4e3   0.53%     25.97MiB / 31.23GiB   0.08%     95MB / 80.3MB     73.7MB / 20.7MB",
      "e21ad2e1969a   9.03%     93.05MiB / 31.23GiB   0.29%     3.24MB / 123MB    167MB / 38.2MB",
      "f76df2815aa7   0.00%     17.32MiB / 31.23GiB   0.05%     1.93MB / 38.5MB   23MB / 2.24MB",
      "531e9a39e50a   0.35%     190.9MiB / 31.23GiB   0.60%     1.6MB / 1.71MB    812MB / 139MB",
      "fe7ea8b5623f   0.00%     63.85MiB / 31.23GiB   0.20%     111MB / 114MB     34.6MB / 0B",
      "9de0a0b0e989   1.05%     427.8MiB / 31.23GiB   1.34%     3.59MB / 37.7MB   474MB / 390MB",
      "4987d782cc69   0.13%     8.582MiB / 31.23GiB   0.03%     4.57MB / 7.18MB   37.3MB / 34.3MB",
      "d961839445f9   3.66%     64.1MiB / 31.23GiB    0.20%     35.8MB / 9.72MB   220MB / 80.2MB",
      "624697f0eaa5   0.15%     21.98MiB / 31.23GiB   0.07%     28MB / 8.5MB      85.9MB / 42.1MB",
      "06cbb2befada   16.50%    221.6MiB / 31.23GiB   0.69%     90.1MB / 128MB    77.9MB / 0B",
      "6e6977db6ba7   5.07%     56.68MiB / 31.23GiB   0.18%     41.2MB / 45.3MB   111MB / 108MB",
      "a44fe3d68545   0.02%     1.441MiB / 31.23GiB   0.00%     91.9kB / 11.1kB   6.69MB / 1.43MB",
      "2d44fb399ca2   0.43%     38.17MiB / 2GiB       1.86%     4.55MB / 7.99MB   242MB / 66.6MB",
      "19677449dd04   0.92%     4.57MiB / 31.23GiB    0.01%     76.6MB / 67MB     17.3MB / 26.4MB"
    ],
    "timestamp": "2025-08-19T07:48:02.549260"
  },
  "polling_patterns": {
    "session_validation": {
      "source": "AuthContext.jsx",
      "interval_seconds": 600,
      "throttle_interval_seconds": 300,
      "deduplication_enabled": true,
      "circuit_breaker_enabled": true,
      "description": "Periodic auth status check every 10 minutes with 5-minute throttling"
    },
    "health_checks": {
      "source": "AuthContext.jsx",
      "interval_seconds": 30,
      "circuit_breaker_threshold": 5,
      "description": "Health checks throttled to minimum 30 seconds apart"
    },
    "dashboard_loading": {
      "source": "Dashboard.jsx",
      "pattern": "on_demand",
      "endpoints": [
        "/api/v1/dashboard",
        "/api/v1/performance_dashboard",
        "/api/v1/health"
      ],
      "description": "Dashboard loads data once on component mount, no automatic polling"
    },
    "middleware_optimizations": {
      "source": "main.py middleware stack",
      "cached_auth_ttl": 600,
      "session_cache_ttl": 300,
      "rate_limits": {
        "session_validate_calls": 600,
        "auth_calls": 120,
        "token_refresh_calls": 80
      },
      "description": "Extensive caching and rate limiting in place"
    }
  },
  "analysis": {},
  "recommendations": [
    {
      "priority": "INFO",
      "category": "Current State Assessment",
      "finding": "Code analysis shows good polling optimizations already in place",
      "details": [
        "Session validation: 10-minute intervals with throttling",
        "Health checks: 30-second minimum throttling",
        "Dashboard: On-demand loading, no auto-polling",
        "Extensive caching: 5-10 minute TTLs",
        "Rate limiting: 600 session validations/minute allowed",
        "Circuit breaker: 5 failure threshold with exponential backoff"
      ]
    },
    {
      "priority": "HIGH",
      "category": "Flickering Root Cause",
      "assessment": "Backend polling patterns appear optimized",
      "likely_cause": "Frontend state management or rendering cycles",
      "investigation_needed": [
        "React component re-rendering patterns",
        "State update cascades in AuthContext",
        "Conditional rendering based on auth state",
        "Component unmounting/remounting during auth checks"
      ],
      "recommendation": "Focus optimization on frontend rendering patterns rather than API polling frequency"
    }
  ]
}