{
  "package_id": "backend_integration_context",
  "package_type": "migrated-context",
  "content": "{\n  \"phase\": \"integration_implementation\",\n  \"priority\": \"critical\",\n  \"agent\": \"backend-gateway-expert\",\n  \"focus\": \"Service boundary coordination without core logic changes\",\n  \n  \"components_to_implement\": {\n    \"jwt_token_adapter\": {\n      \"location\": \"/app/api/middleware/jwt_adapter.py\",\n      \"purpose\": \"Normalize JWT formats between legacy/enhanced\",\n      \"key_methods\": [\n        \"normalize_token() - Convert any format to standard\",\n        \"generate_compatible_token() - Create dual-format tokens\",\n        \"lookup_user_id() - Map email to user_id for legacy\"\n      ],\n      \"integration\": \"FastAPI middleware chain before auth checks\"\n    },\n    \n    \"session_validation_normalizer\": {\n      \"location\": \"/app/api/routers/session_router.py\", \n      \"purpose\": \"Standardize session validation responses\",\n      \"key_methods\": [\n        \"normalize_response() - Convert to standard format\",\n        \"wrap_endpoint() - Decorator for existing endpoints\"\n      ],\n      \"integration\": \"Wrap existing /api/auth/session and /api/auth/validate\"\n    },\n    \n    \"fallback_session_provider\": {\n      \"location\": \"/app/shared/session_provider.py\",\n      \"purpose\": \"Redis fallback with local cache\",\n      \"key_methods\": [\n        \"get_session() - Auto-fallback on Redis failure\",\n        \"sync_to_fallback() - Keep cache updated\",\n        \"circuit_breaker_handler() - Manage failures\"\n      ],\n      \"integration\": \"Replace direct Redis calls in auth middleware\"\n    },\n    \n    \"websocket_auth_gateway\": {\n      \"location\": \"/app/api/middleware/ws_auth.py\",\n      \"purpose\": \"Enforce WebSocket authentication\",\n      \"key_methods\": [\n        \"authenticate_upgrade() - Pre-upgrade validation\",\n        \"extract_token() - Get token from request\",\n        \"attach_auth_context() - Add auth to WS connection\"\n      ],\n      \"integration\": \"Add to WebSocket upgrade handler\"\n    },\n    \n    \"service_boundary_coordinator\": {\n      \"location\": \"/app/coordination_service/boundary_coordinator.py\",\n      \"purpose\": \"Orchestrate cross-service state sync\",\n      \"key_methods\": [\n        \"synchronize_login() - Coordinate login across services\",\n        \"publish_auth_event() - Notify all services\",\n        \"maintain_state_map() - Track auth state\"\n      ],\n      \"integration\": \"Call from auth endpoints after successful operations\"\n    }\n  },\n  \n  \"implementation_sequence\": [\n    {\n      \"step\": 1,\n      \"components\": [\"jwt_token_adapter\", \"session_validation_normalizer\"],\n      \"risk\": \"low\",\n      \"validation\": \"Token format tests, response consistency\"\n    },\n    {\n      \"step\": 2,\n      \"components\": [\"fallback_session_provider\"],\n      \"risk\": \"medium\",\n      \"validation\": \"Circuit breaker tests, cache verification\"\n    },\n    {\n      \"step\": 3,\n      \"components\": [\"websocket_auth_gateway\"],\n      \"risk\": \"high\",\n      \"validation\": \"WS auth enforcement, connection tests\"\n    },\n    {\n      \"step\": 4,\n      \"components\": [\"service_boundary_coordinator\"],\n      \"risk\": \"integration\",\n      \"validation\": \"End-to-end flow, state sync verification\"\n    }\n  ],\n  \n  \"critical_fixes\": {\n    \"jwt_format_issue\": {\n      \"problem\": \"Backend handles sub=email OR sub=user_id inconsistently\",\n      \"solution\": \"JWT adapter normalizes both to standard format\",\n      \"files\": [\"/app/api/dependencies.py\", \"/app/api/middleware/auth.py\"]\n    },\n    \n    \"session_validation_issue\": {\n      \"problem\": \"Session endpoint returns wrong format, frontend misinterprets\",\n      \"solution\": \"Normalizer ensures consistent response structure\",\n      \"files\": [\"/app/api/routers/auth_router.py\"]\n    },\n    \n    \"redis_circuit_breaker_issue\": {\n      \"problem\": \"Silent failures when circuit breaker opens\",\n      \"solution\": \"Fallback provider maintains local cache\",\n      \"files\": [\"/app/shared/redis_client.py\"]\n    },\n    \n    \"websocket_bypass_issue\": {\n      \"problem\": \"WebSocket connections bypass all auth\",\n      \"solution\": \"Gateway validates before upgrade\",\n      \"files\": [\"/app/api/routers/chat_ws_fixed.py\"]\n    }\n  },\n  \n  \"validation_requirements\": [\n    \"JWT token normalization working for both formats\",\n    \"Session responses consistent across all endpoints\",\n    \"Fallback cache activates on Redis failure\",\n    \"WebSocket connections require valid auth\",\n    \"State synchronization across services confirmed\"\n  ],\n  \n  \"rollback_checkpoints\": [\n    \"Before JWT adapter integration\",\n    \"After session normalizer deployment\",\n    \"Before WebSocket gateway activation\",\n    \"After full integration complete\"\n  ]\n}",
  "tokens": 504,
  "created_at": "2025-08-18T15:14:25.223787",
  "last_accessed": "2025-08-18T15:14:25.223800",
  "priority": "medium",
  "context_tags": [
    "migrated",
    "context-package"
  ]
}