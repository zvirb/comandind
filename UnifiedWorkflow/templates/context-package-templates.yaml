# Context Package Templates
# Standardized templates for agent coordination and context sharing

metadata:
  version: "2.0"
  created: "2025-01-19"
  description: "Context package templates for unified orchestration workflow"

# Token Limits (STRICTLY ENFORCED)
token_limits:
  memory_mcp_entities: 8000
  context_packages: 4000
  strategic_packages: 3000
  
# Package Type Definitions
package_types:
  strategic_context:
    max_tokens: 3000
    description: "High-level architecture and planning information"
    target_agents: ["project-orchestrator", "enhanced-nexus-synthesis"]
    
  technical_context:
    max_tokens: 4000
    description: "Implementation details and technical specifications"
    target_agents: ["backend-gateway-expert", "schema-database-expert"]
    
  frontend_context:
    max_tokens: 3000
    description: "UI patterns, components, and frontend architecture"
    target_agents: ["ui-architect", "ux-architect", "ui-debugger"]
    
  security_context:
    max_tokens: 3000
    description: "Authentication patterns and security vulnerabilities"
    target_agents: ["security-validator", "fullstack-communication-auditor"]
    
  performance_context:
    max_tokens: 3000
    description: "Performance bottlenecks and optimization strategies"
    target_agents: ["performance-profiler", "monitoring-analyst"]
    
  database_context:
    max_tokens: 3500
    description: "Schema definitions and query optimization patterns"
    target_agents: ["schema-database-expert", "performance-profiler"]

# Template Structures

templates:
  strategic_context:
    structure:
      project_overview:
        description: "Brief project description and primary objectives"
        max_tokens: 200
        required: true
        
      architecture_summary:
        description: "High-level system architecture and component relationships"
        max_tokens: 600
        required: true
        
      success_criteria:
        description: "Measurable success metrics and validation requirements"
        max_tokens: 300
        required: true
        
      constraints:
        description: "Technical, business, and resource constraints"
        max_tokens: 400
        required: true
        
      coordination_strategy:
        description: "Multi-agent coordination approach and dependencies"
        max_tokens: 500
        required: true
        
      risk_assessment:
        description: "Identified risks and mitigation strategies"
        max_tokens: 300
        required: false
        
      timeline:
        description: "High-level timeline and milestone expectations"
        max_tokens: 200
        required: false
    
    example: |
      # Strategic Context Package
      
      ## Project Overview
      Implement comprehensive graph visualization system with real-time data processing and interactive user interface.
      
      ## Architecture Summary
      - Microservices architecture with API gateway
      - React frontend with WebGL rendering
      - PostgreSQL with Redis caching
      - Container-based deployment
      
      ## Success Criteria
      - Sub-200ms API response times
      - 99.9% uptime
      - Support for 10k concurrent users
      - WCAG 2.1 AA compliance
      
      ## Constraints
      - Must maintain existing API compatibility
      - Budget limit: $50k/month infrastructure
      - Launch deadline: Q2 2025
      
      ## Coordination Strategy
      - Parallel stream development
      - Redis scratch pad for cross-domain communication
      - Weekly integration checkpoints
      
  technical_context:
    structure:
      current_architecture:
        description: "Existing system architecture and technology stack"
        max_tokens: 800
        required: true
        
      implementation_details:
        description: "Specific implementation requirements and patterns"
        max_tokens: 1000
        required: true
        
      dependencies:
        description: "External dependencies and integration requirements"
        max_tokens: 400
        required: true
        
      configuration:
        description: "Environment and configuration specifications"
        max_tokens: 500
        required: true
        
      data_flows:
        description: "Data flow patterns and API specifications"
        max_tokens: 600
        required: true
        
      testing_requirements:
        description: "Testing strategies and quality assurance needs"
        max_tokens: 400
        required: false
        
      deployment_specs:
        description: "Deployment and infrastructure requirements"
        max_tokens: 300
        required: false
    
    example: |
      # Technical Context Package
      
      ## Current Architecture
      - Node.js backend with Express framework
      - React frontend with TypeScript
      - PostgreSQL primary database
      - Redis for caching and sessions
      - Docker containerization
      - Nginx reverse proxy
      
      ## Implementation Details
      - RESTful API with GraphQL subscriptions
      - JWT authentication with refresh tokens
      - Real-time updates via WebSocket
      - File uploads to S3-compatible storage
      - Elasticsearch for search functionality
      
      ## Dependencies
      - PostgreSQL 14+
      - Redis 6+
      - Node.js 18+
      - React 18+
      - External APIs: Auth0, Stripe, SendGrid
      
      ## Configuration
      - Environment variables for all secrets
      - Docker Compose for local development
      - Kubernetes manifests for production
      - SSL/TLS termination at load balancer
      
      ## Data Flows
      - API Gateway → Authentication → Service Router
      - WebSocket connections for real-time data
      - Async job processing with Redis Queue
      - Database connection pooling
      
  frontend_context:
    structure:
      component_architecture:
        description: "Component hierarchy and design system"
        max_tokens: 600
        required: true
        
      state_management:
        description: "State management patterns and data flow"
        max_tokens: 500
        required: true
        
      styling_approach:
        description: "CSS framework and styling methodology"
        max_tokens: 300
        required: true
        
      performance_requirements:
        description: "Performance targets and optimization needs"
        max_tokens: 400
        required: true
        
      accessibility_needs:
        description: "Accessibility requirements and compliance standards"
        max_tokens: 300
        required: true
        
      user_experience:
        description: "UX patterns and interaction requirements"
        max_tokens: 400
        required: false
        
      browser_support:
        description: "Browser compatibility and polyfill requirements"
        max_tokens: 200
        required: false
    
    example: |
      # Frontend Context Package
      
      ## Component Architecture
      - Atomic design pattern (atoms, molecules, organisms)
      - Reusable component library with Storybook
      - TypeScript for type safety
      - React hooks for state and lifecycle
      
      ## State Management
      - Redux Toolkit for global state
      - React Query for server state
      - Local state for component-specific data
      - Context for theme and user preferences
      
      ## Styling Approach
      - Tailwind CSS for utility classes
      - CSS modules for component styles
      - Design tokens for consistency
      - Dark/light theme support
      
      ## Performance Requirements
      - First Contentful Paint < 1.5s
      - Largest Contentful Paint < 2.5s
      - Bundle size < 500KB gzipped
      - Cumulative Layout Shift < 0.1
      
      ## Accessibility Needs
      - WCAG 2.1 AA compliance
      - Screen reader support
      - Keyboard navigation
      - Focus management
      - Color contrast ratios

# Usage Guidelines

usage_guidelines:
  creation:
    - "Always specify target agents for each package"
    - "Include token count estimates for each section"
    - "Validate against token limits before distribution"
    - "Use clear, actionable language"
    - "Include specific technical details when relevant"
    
  distribution:
    - "Send only relevant packages to each agent"
    - "Avoid redundant information across packages"
    - "Update packages based on agent feedback"
    - "Maintain package versioning for changes"
    
  validation:
    - "Verify token limits are respected"
    - "Ensure all required sections are completed"
    - "Check for technical accuracy and clarity"
    - "Validate against current project state"
    
  maintenance:
    - "Update packages as project evolves"
    - "Remove outdated information regularly"
    - "Consolidate related packages when possible"
    - "Archive completed context packages"

# Quality Checklist

quality_checklist:
  content:
    - "Is the information accurate and up-to-date?"
    - "Are technical details specific and actionable?"
    - "Is the language clear and unambiguous?"
    - "Are all dependencies and constraints identified?"
    
  structure:
    - "Does the package follow the template structure?"
    - "Are token limits respected for each section?"
    - "Is the overall package under the token limit?"
    - "Are required sections completed?"
    
  targeting:
    - "Is the package relevant to target agents?"
    - "Does it provide sufficient context for task execution?"
    - "Are coordination points clearly identified?"
    - "Is the package appropriate for the workflow phase?"