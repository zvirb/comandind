version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: testdb
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    tmpfs:
      - /var/lib/postgresql/data  # Use tmpfs for faster tests
    
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    tmpfs:
      - /qdrant/storage  # Use tmpfs for faster tests

  api:
    build:
      context: .
      dockerfile: app/api/Dockerfile
      target: development
    ports:
      - "8000:8000"
    environment:
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: test
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: testdb
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Qdrant
      QDRANT_URL: http://qdrant:6333
      QDRANT_API_KEY: ""
      
      # Authentication
      JWT_SECRET_KEY: test-jwt-secret-key-for-testing-only
      API_KEY: test-api-key
      
      # Testing
      TESTING: 1
      PYTHONPATH: /app
      
      # Logging
      LOG_LEVEL: INFO
      
      # External Services (mocked)
      OLLAMA_EMBEDDING_MODEL_NAME: test-model
      SERPAPI_KEY: test-serpapi-key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./app:/app
      - ./tests:/tests
      - ./alembic:/alembic
      - ./alembic.ini:/alembic.ini
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 10 &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Starting API server...' &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

  webui:
    build:
      context: app/webui
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      PUBLIC_API_BASE_URL: http://api:8000
      PUBLIC_WS_URL: ws://api:8000
      NODE_ENV: test
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./app/webui/src:/app/src
      - ./app/webui/tests:/app/tests
    command: npm run dev

  worker:
    build:
      context: .
      dockerfile: app/worker/Dockerfile
      target: development
    environment:
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: test
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: testdb
      
      # Redis/Celery
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # Testing
      TESTING: 1
      PYTHONPATH: /app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app
      - ./tests:/tests
    command: >
      sh -c "
        echo 'Starting test worker...' &&
        celery -A worker.main worker --loglevel=info --concurrency=2
      "

networks:
  default:
    name: ai_workflow_test

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local