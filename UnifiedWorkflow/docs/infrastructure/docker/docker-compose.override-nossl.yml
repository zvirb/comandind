# Docker Compose Override for SSL-less Development Mode
# This override removes SSL certificate dependencies and configures services for HTTP-only operation
# Use: docker-compose -f docker-compose.yml -f docker-compose.override-nossl.yml up

version: "3.8"

services:
  # API service - Remove SSL configuration and use HTTP
  api:
    environment:
      - USE_SSL=false
      - SSL_CERT_PATH=
      - SSL_KEY_PATH=
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  # PostgreSQL - Disable SSL
  postgres:
    command:
      - "postgres"
      - "-c"
      - "ssl=off"
    # Remove SSL certificate volumes
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/01-init-db.sh:/docker-entrypoint-initdb.d/01-init-db.sh:ro
      - ./docker/postgres/docker-entrypoint-wrapper.sh:/usr/local/bin/docker-entrypoint-wrapper.sh:ro

  # PgBouncer - Use HTTP configuration
  pgbouncer:
    volumes:
      - ./config/pgbouncer/pgbouncer-nossl.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./docker/pgbouncer/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=$(cat /run/secrets/POSTGRES_PASSWORD) psql 'host=localhost port=6432 dbname=pgbouncer user=app_user sslmode=disable' -c 'SHOW VERSION;' --quiet -w || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Qdrant - Disable TLS
  qdrant:
    environment:
      - QDRANT__SERVICE__ENABLE_TLS=false
      - QDRANT__TLS__CERT=
      - QDRANT__TLS__KEY=
      - QDRANT__TLS__CA_CERT=
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  # Caddy - Use fallback configuration without SSL certificates
  caddy_reverse_proxy:
    volumes:
      - ./config/caddy/Caddyfile-fallback:/etc/caddy/Caddyfile:ro
    # Remove certificate volumes
    # Add port 8080 for HTTP fallback
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # HTTP fallback port
      - "8443:8443"
    environment:
      - DOMAIN=${DOMAIN}
      - SSL_MODE=disabled
    depends_on: []  # Remove API dependency temporarily
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:2019/config/"]
      interval: 15s
      timeout: 3s
      retries: 3

  # WebUI - Remove certificate mounting and use HTTP mode
  webui:
    # Remove certificate volumes
    volumes: []
    depends_on: []  # Remove API dependency temporarily
    environment:
      - NODE_ENV=development
      - VITE_SSL_MODE=disabled
      - VITE_API_BASE_URL=http://api:8000

  # Worker - Remove certificate dependencies
  worker:
    # Remove certificate volumes and use simpler configuration
    volumes:
      - ./docker/worker/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro
      - ./docker/worker/run.sh:/usr/local/bin/run.sh:ro
      - ./docker/worker/healthcheck.sh:/usr/local/bin/healthcheck.sh:ro
      - ./app:/app:rw

  # Remove certificate-dependent services' SSL configurations
  prometheus:
    # Remove certificate volumes
    volumes:
      - ./config/prometheus/prometheus-nossl.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus

  alertmanager:
    # Remove certificate volumes
    volumes:
      - alertmanager_data:/alertmanager
      - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro

  # Remove certificate dependencies from exporters
  redis_exporter:
    volumes: []

  postgres_exporter:
    environment:
      - DATA_SOURCE_NAME=postgresql://app_user@postgres:5432/ai_workflow_db?sslmode=disable
    volumes:
      - ./config/postgres_exporter.yml:/postgres_exporter.yml:ro

  pgbouncer_exporter:
    volumes: []

# Remove the certs volume entirely
volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  ollama_data:
  webui_node_modules: {}