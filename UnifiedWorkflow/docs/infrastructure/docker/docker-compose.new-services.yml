# New Intelligent Services - Docker Compose Extension
# Add these services to the main docker-compose.yml

version: '3.8'

# Additional volumes for new services
volumes:
  rabbitmq_data:
  kafka_data:
  zookeeper_data:
  voice_models:
  recommendation_models:

# Additional secrets for new services
secrets:
  jwt_secret:
    file: ./secrets/jwt_secret_key.txt
  openweather_api_key:
    file: ./secrets/openweather_api_key.txt
  tomtom_api_key:
    file: ./secrets/tomtom_api_key.txt
  shopify_access_token:
    file: ./secrets/shopify_access_token.txt
  google_maps_api_key:
    file: ./secrets/google_maps_api_key.txt
  fcm_server_key:
    file: ./secrets/fcm_server_key.txt

services:
  # Voice Interaction Service
  voice-interaction-service:
    <<: &base-service
      restart: unless-stopped
      networks:
        - ai_workflow_engine_net
      logging:
        driver: json-file
        options:
          max-size: "10m"
          max-file: "3"
    build:
      context: ./app/voice_interaction_service
      dockerfile: Dockerfile
    image: ai_workflow_engine/voice-interaction-service
    ports:
      - "8006:8006"
    volumes:
      - voice_models:/app/models
      - type: volume
        source: certs
        target: /tmp/certs-volume
        read_only: true
    environment:
      - SERVICE_NAME=voice-interaction-service
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379
      - VOSK_MODEL_PATH=/app/models/vosk-model-en-us-0.22
      - WHISPER_MODEL=small.en
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
    secrets:
      - jwt_secret
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # RabbitMQ for Action Queue System
  rabbitmq:
    <<: *base-service
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
      - RABBITMQ_DEFAULT_VHOST=/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Action Queue Service
  action-queue-service:
    <<: *base-service
    build:
      context: ./app/action_queue_service
      dockerfile: Dockerfile
    image: ai_workflow_engine/action-queue-service
    ports:
      - "8007:8007"
    environment:
      - SERVICE_NAME=action-queue-service
      - PYTHONPATH=/app
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672//
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
    secrets:
      - jwt_secret
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Celery Worker for Action Queue
  action-queue-worker:
    <<: *base-service
    image: ai_workflow_engine/action-queue-service
    command: ["celery", "-A", "action_queue_service", "worker", "--loglevel=info", "--concurrency=4"]
    environment:
      - SERVICE_NAME=action-queue-worker
      - PYTHONPATH=/app
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672//
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
    secrets:
      - jwt_secret
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "action_queue_service", "status"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Apache Kafka for Event Streaming
  zookeeper:
    <<: *base-service
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    <<: *base-service
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Proactive Nudge Service
  nudge-service:
    <<: *base-service
    build:
      context: ./app/nudge_service
      dockerfile: Dockerfile
    image: ai_workflow_engine/nudge-service
    ports:
      - "8008:8008"
    environment:
      - SERVICE_NAME=nudge-service
      - PYTHONPATH=/app
      - KAFKA_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - FCM_SERVER_KEY_FILE=/run/secrets/fcm_server_key
    secrets:
      - jwt_secret
      - fcm_server_key
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Recommendation Engine Service
  recommendation-service:
    <<: *base-service
    build:
      context: ./app/recommendation_service
      dockerfile: Dockerfile
    image: ai_workflow_engine/recommendation-service
    ports:
      - "8009:8009"
    volumes:
      - recommendation_models:/app/models
    environment:
      - SERVICE_NAME=recommendation-service
      - PYTHONPATH=/app
      - KAFKA_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
    secrets:
      - jwt_secret
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # External API Integration Service
  external-api-service:
    <<: *base-service
    build:
      context: ./app/external_api_service
      dockerfile: Dockerfile
    image: ai_workflow_engine/external-api-service
    ports:
      - "8011:8010"  # Avoid conflict with infrastructure-recovery-service
    environment:
      - SERVICE_NAME=external-api-service
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - OPENWEATHER_API_KEY_FILE=/run/secrets/openweather_api_key
      - TOMTOM_API_KEY_FILE=/run/secrets/tomtom_api_key
      - SHOPIFY_ACCESS_TOKEN_FILE=/run/secrets/shopify_access_token
      - GOOGLE_MAPS_API_KEY_FILE=/run/secrets/google_maps_api_key
    secrets:
      - jwt_secret
      - openweather_api_key
      - tomtom_api_key
      - shopify_access_token
      - google_maps_api_key
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Kafka Connect for data integration (optional)
  kafka-connect:
    <<: *base-service
    image: confluentinc/cp-kafka-connect:7.4.0
    ports:
      - "8083:8083"
    environment:
      - CONNECT_BOOTSTRAP_SERVERS=kafka:9092
      - CONNECT_REST_ADVERTISED_HOST_NAME=kafka-connect
      - CONNECT_REST_PORT=8083
      - CONNECT_GROUP_ID=connect-cluster-group
      - CONNECT_CONFIG_STORAGE_TOPIC=docker-connect-configs
      - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_OFFSET_FLUSH_INTERVAL_MS=10000
      - CONNECT_OFFSET_STORAGE_TOPIC=docker-connect-offsets
      - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_STATUS_STORAGE_TOPIC=docker-connect-status
      - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.storage.StringConverter
      - CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - CONNECT_PLUGIN_PATH="/usr/share/java,/usr/share/confluent-hub-components"
      - CONNECT_LOG4J_LOGGERS=org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Kafka UI for monitoring (optional)
  kafka-ui:
    <<: *base-service
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3