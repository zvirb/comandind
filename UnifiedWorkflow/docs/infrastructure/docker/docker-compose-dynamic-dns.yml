version: '3.8'

# Dynamic DNS Enhanced Docker Compose
# Adds DNS management and SSL certificate automation

services:
  # Enhanced Caddy with DNS-01 challenge support
  caddy_reverse_proxy:
    build:
      context: .
      dockerfile: docker/caddy_reverse_proxy/Dockerfile
    container_name: caddy_reverse_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "2019:2019"  # Admin API
    volumes:
      - ./config/caddy/Caddyfile-dynamic-dns:/etc/caddy/Caddyfile:ro
      - ./certs:/etc/ssl/certs
      - caddy_data:/data
      - caddy_config:/config
      - ./logs/caddy:/var/log/caddy
      - dns_api_token:/run/secrets/dns_api_token:ro
    networks:
      - ai_workflow_network
    depends_on:
      - api
    environment:
      - DOMAIN=${DOMAIN:-aiwfe.com}
      - DNS_PROVIDER=${DNS_PROVIDER:-cloudflare}
      - ACME_EMAIL=${ACME_EMAIL:-admin@aiwfe.com}
      - SERVER_IP=${SERVER_IP}
    secrets:
      - dns_api_token
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2019/config/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dynamic DNS Manager Service
  dns_ssl_manager:
    build:
      context: .
      dockerfile: docker/dns_manager/Dockerfile
    container_name: dns_ssl_manager
    restart: unless-stopped
    volumes:
      - ./scripts/dynamic_dns:/app/scripts:ro
      - ./config/dynamic_dns_config.json:/app/config.json:ro
      - ./logs/dns_ssl:/var/log:rw
      - dns_api_token:/run/secrets/dns_api_token:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Caddy reload
    networks:
      - ai_workflow_network
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CHECK_INTERVAL=${DNS_CHECK_INTERVAL:-300}
      - WEBHOOK_URL=${DNS_WEBHOOK_URL:-}
    secrets:
      - dns_api_token
    depends_on:
      - caddy_reverse_proxy
    command: /app/scripts/dns_ssl_manager.sh daemon

  # IP Change Monitor (lightweight watchdog)
  ip_monitor:
    image: alpine:latest
    container_name: ip_monitor
    restart: unless-stopped
    volumes:
      - ./scripts/dynamic_dns:/scripts:ro
      - ./logs/ip_monitor:/var/log:rw
    environment:
      - DOMAIN=${DOMAIN:-aiwfe.com}
      - CHECK_INTERVAL=60  # Check every minute for IP changes
    command: |
      sh -c "
        apk add --no-cache curl jq bind-tools &&
        while true; do
          current_ip=\$$(curl -s https://ipv4.icanhazip.com)
          dns_ip=\$$(dig +short ${DOMAIN:-aiwfe.com} @8.8.8.8)
          if [ \"\$$current_ip\" != \"\$$dns_ip\" ]; then
            echo \"\$$(date): IP change detected: \$$current_ip vs \$$dns_ip\" >> /var/log/ip_changes.log
            # Trigger immediate DNS update
            docker exec dns_ssl_manager /app/scripts/dns_ssl_manager.sh check
          fi
          sleep ${CHECK_INTERVAL:-60}
        done
      "

  # Certificate Health Monitor
  cert_monitor:
    image: alpine:latest
    container_name: cert_monitor
    restart: unless-stopped
    volumes:
      - ./logs/cert_monitor:/var/log:rw
    environment:
      - DOMAIN=${DOMAIN:-aiwfe.com}
      - ALERT_DAYS=${CERT_ALERT_DAYS:-30}
      - WEBHOOK_URL=${CERT_WEBHOOK_URL:-}
    command: |
      sh -c "
        apk add --no-cache openssl curl &&
        while true; do
          # Check certificate daily
          cert_info=\$$(echo | openssl s_client -servername ${DOMAIN:-aiwfe.com} -connect ${DOMAIN:-aiwfe.com}:443 2>/dev/null | openssl x509 -noout -dates 2>/dev/null)
          if [ -n \"\$$cert_info\" ]; then
            not_after=\$$(echo \"\$$cert_info\" | grep 'notAfter' | cut -d= -f2)
            expiry_timestamp=\$$(date -d \"\$$not_after\" +%s)
            current_timestamp=\$$(date +%s)
            days_until_expiry=\$$(( (expiry_timestamp - current_timestamp) / 86400 ))
            
            echo \"\$$(date): Certificate expires in \$$days_until_expiry days\" >> /var/log/cert_status.log
            
            if [ \$$days_until_expiry -lt ${CERT_ALERT_DAYS:-30} ]; then
              echo \"\$$(date): Certificate expiring soon: \$$days_until_expiry days\" >> /var/log/cert_alerts.log
              if [ -n \"${CERT_WEBHOOK_URL:-}\" ]; then
                curl -s -X POST \"${CERT_WEBHOOK_URL}\" -H 'Content-Type: application/json' -d '{\"text\": \"⚠️ Certificate for ${DOMAIN:-aiwfe.com} expires in '\$$days_until_expiry' days\"}'
              fi
            fi
          else
            echo \"\$$(date): Failed to retrieve certificate\" >> /var/log/cert_errors.log
          fi
          sleep 86400  # Check daily
        done
      "

  # Existing services (API, WebUI, etc.)
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: api
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app:rw
    environment:
      - POSTGRES_HOST=pgbouncer
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEV_MODE=${DEV_MODE:-false}
    networks:
      - ai_workflow_network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Other services (postgres, redis, etc.) - inherit from base compose

networks:
  ai_workflow_network:
    driver: bridge

volumes:
  caddy_data:
  caddy_config:
  postgres_data:
  redis_data:
  dns_api_token:
    driver: local

secrets:
  dns_api_token:
    file: ./secrets/dns_api_token.txt