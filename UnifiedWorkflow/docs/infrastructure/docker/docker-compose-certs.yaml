# ==============================================================================
# Automatic Certificate Generation for AI Workflow Engine
# Creates and manages mTLS certificates for all services
# ==============================================================================

# Reusable YAML Anchors
x-cert-base: &cert-base
  image: alpine/openssl:latest
  working_dir: /certs
  restart: "no"
  networks:
    - ai_workflow_engine_cert_net
  volumes:
    - type: bind
      source: ./certs
      target: /certs
    - type: bind
      source: ./scripts/security
      target: /scripts
      read_only: true

# ==============================================================================
# Networks
# ==============================================================================
networks:
  ai_workflow_engine_cert_net:
    driver: bridge

# ==============================================================================
# Certificate Generation Services
# ==============================================================================
services:
  # Certificate Authority Setup
  ca-setup:
    <<: *cert-base
    container_name: ca-setup
    command: >
      sh -c "
        echo 'Setting up Certificate Authority...'
        
        # Create CA directory structure
        mkdir -p /certs/ca/{private,certs,newcerts,crl}
        chmod 700 /certs/ca/private
        
        # Initialize CA database files
        touch /certs/ca/index.txt
        echo '1000' > /certs/ca/serial
        echo '1000' > /certs/ca/crlnumber
        
        # Generate CA private key if it doesn't exist
        if [ ! -f /certs/ca/private/ca-key.pem ]; then
          echo 'Generating CA private key...'
          openssl genrsa -out /certs/ca/private/ca-key.pem 4096
          chmod 400 /certs/ca/private/ca-key.pem
        fi
        
        # Generate CA certificate if it doesn't exist
        if [ ! -f /certs/ca/ca-cert.pem ]; then
          echo 'Generating CA certificate...'
          openssl req -new -x509 -days 3650 -key /certs/ca/private/ca-key.pem \
            -out /certs/ca/ca-cert.pem \
            -subj '/C=US/ST=California/L=San Francisco/O=AI Workflow Engine/OU=Security/CN=AI Workflow Engine CA'
        fi
        
        echo 'CA setup complete!'
      "

  # API Service Certificates
  api-certs:
    <<: *cert-base
    container_name: api-certs
    depends_on:
      - ca-setup
    command: >
      sh -c "
        echo 'Generating API certificates...'
        
        mkdir -p /certs/api
        
        # Generate private key
        openssl genrsa -out /certs/api/api-key.pem 4096
        
        # Create CSR with SAN extension
        cat > /tmp/api.conf <<EOF
        [req]
        distinguished_name = req_distinguished_name
        req_extensions = v3_req
        prompt = no
        
        [req_distinguished_name]
        C = US
        ST = California  
        L = San Francisco
        O = AI Workflow Engine
        OU = API
        CN = api
        
        [v3_req]
        keyUsage = keyEncipherment, dataEncipherment
        extendedKeyUsage = serverAuth, clientAuth
        subjectAltName = @alt_names
        
        [alt_names]
        DNS.1 = api
        DNS.2 = localhost
        DNS.3 = api.ai-workflow-engine.local
        DNS.4 = aiwfe.com
        IP.1 = 127.0.0.1
        EOF
        
        # Generate CSR
        openssl req -new -key /certs/api/api-key.pem -out /tmp/api.csr -config /tmp/api.conf
        
        # Sign certificate with CA
        openssl x509 -req -in /tmp/api.csr -CA /certs/ca/ca-cert.pem -CAkey /certs/ca/private/ca-key.pem \
          -CAcreateserial -out /certs/api/api-cert.pem -days 365 -extensions v3_req -extfile /tmp/api.conf
        
        # Create unified certificate
        cat /certs/api/api-cert.pem /certs/ca/ca-cert.pem > /certs/api/unified-cert.pem
        cp /certs/api/api-key.pem /certs/api/unified-key.pem
        
        echo 'API certificates generated!'
      "

  # WebUI Service Certificates  
  webui-certs:
    <<: *cert-base
    container_name: webui-certs
    depends_on:
      - ca-setup
    command: >
      sh -c "
        echo 'Generating WebUI certificates...'
        
        mkdir -p /certs/webui
        
        openssl genrsa -out /certs/webui/webui-key.pem 4096
        
        cat > /tmp/webui.conf <<EOF
        [req]
        distinguished_name = req_distinguished_name
        req_extensions = v3_req
        prompt = no
        
        [req_distinguished_name]
        C = US
        ST = California
        L = San Francisco
        O = AI Workflow Engine
        OU = WebUI
        CN = webui
        
        [v3_req]
        keyUsage = keyEncipherment, dataEncipherment
        extendedKeyUsage = serverAuth, clientAuth
        subjectAltName = @alt_names
        
        [alt_names]
        DNS.1 = webui
        DNS.2 = localhost
        DNS.3 = webui.ai-workflow-engine.local
        DNS.4 = aiwfe.com
        IP.1 = 127.0.0.1
        EOF
        
        openssl req -new -key /certs/webui/webui-key.pem -out /tmp/webui.csr -config /tmp/webui.conf
        openssl x509 -req -in /tmp/webui.csr -CA /certs/ca/ca-cert.pem -CAkey /certs/ca/private/ca-key.pem \
          -CAcreateserial -out /certs/webui/webui-cert.pem -days 365 -extensions v3_req -extfile /tmp/webui.conf
        
        cat /certs/webui/webui-cert.pem /certs/ca/ca-cert.pem > /certs/webui/unified-cert.pem
        cp /certs/webui/webui-key.pem /certs/webui/unified-key.pem
        
        echo 'WebUI certificates generated!'
      "

  # Caddy Reverse Proxy Certificates
  caddy-certs:
    <<: *cert-base
    container_name: caddy-certs
    depends_on:
      - ca-setup
    command: >
      sh -c "
        echo 'Generating Caddy certificates...'
        
        mkdir -p /certs/caddy_reverse_proxy
        
        openssl genrsa -out /certs/caddy_reverse_proxy/caddy_reverse_proxy-key.pem 4096
        
        cat > /tmp/caddy.conf <<EOF
        [req]
        distinguished_name = req_distinguished_name
        req_extensions = v3_req
        prompt = no
        
        [req_distinguished_name]
        C = US
        ST = California
        L = San Francisco
        O = AI Workflow Engine
        OU = Proxy
        CN = caddy
        
        [v3_req]
        keyUsage = keyEncipherment, dataEncipherment
        extendedKeyUsage = serverAuth, clientAuth
        subjectAltName = @alt_names
        
        [alt_names]
        DNS.1 = caddy
        DNS.2 = localhost
        DNS.3 = *.ai-workflow-engine.local
        DNS.4 = aiwfe.com
        DNS.5 = *.aiwfe.com
        IP.1 = 127.0.0.1
        EOF
        
        openssl req -new -key /certs/caddy_reverse_proxy/caddy_reverse_proxy-key.pem -out /tmp/caddy.csr -config /tmp/caddy.conf
        openssl x509 -req -in /tmp/caddy.csr -CA /certs/ca/ca-cert.pem -CAkey /certs/ca/private/ca-key.pem \
          -CAcreateserial -out /certs/caddy_reverse_proxy/caddy_reverse_proxy-cert.pem -days 365 -extensions v3_req -extfile /tmp/caddy.conf
        
        cat /certs/caddy_reverse_proxy/caddy_reverse_proxy-cert.pem /certs/ca/ca-cert.pem > /certs/caddy_reverse_proxy/unified-cert.pem
        cp /certs/caddy_reverse_proxy/caddy_reverse_proxy-key.pem /certs/caddy_reverse_proxy/unified-key.pem
        
        echo 'Caddy certificates generated!'
      "

  # PostgreSQL Database Certificates
  postgres-certs:
    <<: *cert-base
    container_name: postgres-certs
    depends_on:
      - ca-setup
    command: >
      sh -c "
        echo 'Generating PostgreSQL certificates...'
        
        mkdir -p /certs/postgres
        
        openssl genrsa -out /certs/postgres/postgres-key.pem 4096
        
        cat > /tmp/postgres.conf <<EOF
        [req]
        distinguished_name = req_distinguished_name
        req_extensions = v3_req
        prompt = no
        
        [req_distinguished_name]
        C = US
        ST = California
        L = San Francisco
        O = AI Workflow Engine
        OU = Database
        CN = postgres
        
        [v3_req]
        keyUsage = keyEncipherment, dataEncipherment
        extendedKeyUsage = serverAuth, clientAuth
        subjectAltName = @alt_names
        
        [alt_names]
        DNS.1 = postgres
        DNS.2 = localhost
        DNS.3 = postgres.ai-workflow-engine.local
        IP.1 = 127.0.0.1
        EOF
        
        openssl req -new -key /certs/postgres/postgres-key.pem -out /tmp/postgres.csr -config /tmp/postgres.conf
        openssl x509 -req -in /tmp/postgres.csr -CA /certs/ca/ca-cert.pem -CAkey /certs/ca/private/ca-key.pem \
          -CAcreateserial -out /certs/postgres/postgres-cert.pem -days 365 -extensions v3_req -extfile /tmp/postgres.conf
        
        cat /certs/postgres/postgres-cert.pem /certs/ca/ca-cert.pem > /certs/postgres/unified-cert.pem
        cp /certs/postgres/postgres-key.pem /certs/postgres/unified-key.pem
        
        echo 'PostgreSQL certificates generated!'
      "

  # Redis Cache Certificates
  redis-certs:
    <<: *cert-base
    container_name: redis-certs
    depends_on:
      - ca-setup
    command: >
      sh -c "
        echo 'Generating Redis certificates...'
        
        mkdir -p /certs/redis
        
        openssl genrsa -out /certs/redis/redis-key.pem 4096
        
        cat > /tmp/redis.conf <<EOF
        [req]
        distinguished_name = req_distinguished_name
        req_extensions = v3_req
        prompt = no
        
        [req_distinguished_name]
        C = US
        ST = California
        L = San Francisco
        O = AI Workflow Engine
        OU = Cache
        CN = redis
        
        [v3_req]
        keyUsage = keyEncipherment, dataEncipherment
        extendedKeyUsage = serverAuth, clientAuth
        subjectAltName = @alt_names
        
        [alt_names]
        DNS.1 = redis
        DNS.2 = localhost
        DNS.3 = redis.ai-workflow-engine.local
        IP.1 = 127.0.0.1
        EOF
        
        openssl req -new -key /certs/redis/redis-key.pem -out /tmp/redis.csr -config /tmp/redis.conf
        openssl x509 -req -in /tmp/redis.csr -CA /certs/ca/ca-cert.pem -CAkey /certs/ca/private/ca-key.pem \
          -CAcreateserial -out /certs/redis/redis-cert.pem -days 365 -extensions v3_req -extfile /tmp/redis.conf
        
        cat /certs/redis/redis-cert.pem /certs/ca/ca-cert.pem > /certs/redis/unified-cert.pem
        cp /certs/redis/redis-key.pem /certs/redis/unified-key.pem
        
        echo 'Redis certificates generated!'
      "

  # Certificate Permissions Setup
  cert-permissions:
    <<: *cert-base
    container_name: cert-permissions
    depends_on:
      - api-certs
      - webui-certs
      - caddy-certs
      - postgres-certs
      - redis-certs
    command: >
      sh -c "
        echo 'Setting certificate permissions...'
        
        # Set proper permissions for all certificates
        find /certs -name '*.pem' -type f -exec chmod 644 {} \;
        find /certs -name '*-key.pem' -type f -exec chmod 600 {} \;
        find /certs/ca/private -name '*.pem' -type f -exec chmod 400 {} \;
        
        # Set directory permissions
        find /certs -type d -exec chmod 755 {} \;
        chmod 700 /certs/ca/private
        
        echo 'Certificate permissions set!'
        echo 'Certificate generation complete!'
        echo ''
        echo 'To use the certificates:'
        echo '1. Run: docker compose -f docker-compose-certs.yaml up'
        echo '2. Then: docker compose -f docker-compose-mtls.yml up'
        echo ''
        echo 'Generated certificates for:'
        echo '- API (api-cert.pem, api-key.pem)'
        echo '- WebUI (webui-cert.pem, webui-key.pem)'
        echo '- Caddy (caddy_reverse_proxy-cert.pem, caddy_reverse_proxy-key.pem)'
        echo '- PostgreSQL (postgres-cert.pem, postgres-key.pem)'
        echo '- Redis (redis-cert.pem, redis-key.pem)'
        echo '- CA Certificate: certs/ca/ca-cert.pem'
      "