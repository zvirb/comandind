# Prometheus Configuration for AI Workflow Engine Monitoring
# This configuration demonstrates how to scrape metrics from the restored monitoring system

global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  # - "rules/*.yml"

scrape_configs:
  # AI Workflow Engine API Metrics
  - job_name: 'ai-workflow-engine-api'
    static_configs:
      - targets: ['localhost:8000']
    metrics_path: '/api/v1/monitoring/metrics'
    scrape_interval: 15s
    scrape_timeout: 10s
    
    # Optional: Add custom labels
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'ai-workflow-api'
      - source_labels: [__address__]
        target_label: component
        replacement: 'backend'
    
    # Health check configuration
    scheme: http
    
    # Optional: Basic auth if API requires authentication
    # basic_auth:
    #   username: 'monitoring'
    #   password: 'secret'
    
  # Health check monitoring (separate from metrics)
  - job_name: 'ai-workflow-engine-health'
    static_configs:
      - targets: ['localhost:8000']
    metrics_path: '/api/v1/monitoring/health'
    scrape_interval: 30s
    scrape_timeout: 10s
    
    # This will scrape the health endpoint for uptime monitoring
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'ai-workflow-engine'

  # System metrics (if node_exporter is available)
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['localhost:9100']
    scrape_interval: 15s
    scrape_timeout: 10s

# Alerting configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Storage configuration
storage:
  tsdb:
    path: /prometheus/
    retention.time: 15d
    retention.size: 50GB

# Remote write configuration (optional - for external storage)
# remote_write:
#   - url: "https://prometheus-remote-write.example.com/api/v1/write"
#     basic_auth:
#       username: 'user'
#       password: 'pass'