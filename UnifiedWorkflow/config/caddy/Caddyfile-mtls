{
    # This is a global options block.
    # Disable automatic HTTPS globally since we use custom certificates
    email admin@example.com  # Replace with your actual email for Let's Encrypt
    skip_install_trust
    auto_https off
    log {
        output stdout
        level DEBUG
    }
}

# HTTP server for aiwfe.com - no redirect to allow HTTP access
aiwfe.com:80 {
    # Route all API requests to the backend 'api' service on port 8000
    handle /api/* {
        reverse_proxy https://api:8000 {
            header_up X-Forwarded-Host {host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # Handle WebSocket connections
    handle /ws/* {
        reverse_proxy https://api:8000 {
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # Handle all other requests - WebUI
    handle {
        reverse_proxy webui:3000
    }
}

# Default HTTP redirect for localhost and other domains (not aiwfe.com)
localhost:80, 127.0.0.1:80, *.local:80 {
    redir https://{host}{uri}
}

# Production domain - aiwfe.com HTTPS with custom certificate
aiwfe.com:443 {
    # Use custom certificate with aiwfe.com SAN - disable automatic management
    tls /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem

    # OAuth endpoints - no mTLS required for external redirects
    @oauth_endpoints path /api/v1/oauth/*
    handle @oauth_endpoints {
        reverse_proxy https://api:8000 {
            header_up X-Forwarded-Host {host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # Google API integration endpoints - no mTLS required
    @google_endpoints path /api/v1/google/*
    handle @google_endpoints {
        reverse_proxy https://api:8000 {
            header_up X-Forwarded-Host {host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # SerAPI integration endpoints - no mTLS required  
    @search_endpoints path /api/v1/search/*
    handle @search_endpoints {
        reverse_proxy https://api:8000 {
            header_up X-Forwarded-Host {host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # All other requests - regular web interface (no mTLS for Google OAuth compatibility)
    handle /api/* {
        reverse_proxy https://api:8000 {
            header_up X-Forwarded-Host {host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # Handle WebSocket connections
    handle /ws/* {
        reverse_proxy https://api:8000 {
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # Handle all other requests - WebUI
    handle {
        reverse_proxy webui:3000
    }
}

# Production domain - Secured with mTLS for internal access on port 8443
aiwfe.com:8443 {
    # Enable automatic HTTPS with Let's Encrypt and require client certificates for mTLS
    tls /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem {
        client_auth {
            mode require_and_verify
            trusted_ca_cert_file /etc/certs/caddy_reverse_proxy/rootCA.pem
        }
    }

    # Public endpoints that don't require mTLS (certificate provisioning)
    @public_endpoints path /public/*
    handle @public_endpoints {
        reverse_proxy https://api:8000 {
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # Native client endpoints - require mTLS
    @native_endpoints path /native/*
    handle @native_endpoints {
        reverse_proxy https://api:8000 {
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # Regular API requests - require mTLS
    handle /api/* {
        reverse_proxy https://api:8000 {
            header_up X-Forwarded-Host {host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # Handle WebSocket connections - require mTLS
    handle /ws/* {
        reverse_proxy https://api:8000 {
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # Handle public request access page
    @request_access path /request-access
    handle @request_access {
        reverse_proxy webui:3000
    }

    # Handle certificate download page  
    @download_certs path /download-certs*
    handle @download_certs {
        reverse_proxy webui:3000
    }

    # mTLS protected WebUI - redirect failures to request access page
    handle {
        # This will catch mTLS authentication failures
        reverse_proxy webui:3000
    }

    # Error handling for mTLS failures
    handle_errors {
        @cert_error expression {http.error.status_code} == 495
        redir @cert_error /request-access 302
        
        @cert_required expression {http.error.status_code} == 496  
        redir @cert_required /request-access 302
    }
}

# Local development and internal access (HTTPS without client certificates for development)
localhost, 127.0.0.1, *.local, :443 {
    # Enable HTTPS with our certificates but no client certificate requirement for development
    # Disable automatic HTTPS and use our certificates explicitly
    tls /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem {
        protocols tls1.2 tls1.3
    }

    # Route all API requests to the backend 'api' service on port 8000.
    # The 'handle' directive ensures this rule is processed before the general one.
    handle /api/* {
        reverse_proxy https://api:8000 {
            header_up X-Forwarded-Host {host}
            header_up X-Forwarded-Proto {scheme}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # Handle WebSocket connections
    handle /ws/* {
        reverse_proxy https://api:8000 {
            transport http {
                tls_insecure_skip_verify
                tls_client_auth /etc/certs/caddy_reverse_proxy/unified-cert.pem /etc/certs/caddy_reverse_proxy/unified-key.pem
            }
        }
    }

    # Handle all other requests by proxying them to the SvelteKit
    # frontend 'webui' service, which runs on the default port 3000.
    handle {
        reverse_proxy webui:3000
    }
}