---
# Service Routing Configuration
# API Gateway routing for AI Workflow Engine services

version: "1.0"
last_updated: "2025-08-17"

services:
  # Core API Service
  api:
    container: "api:8000"
    routes:
      - path: "/api/*"
        description: "Main API endpoints"
        health_check: "/health"
        auth_required: true
      - path: "/auth/*"
        description: "Authentication endpoints"
        health_check: "/health"
        auth_required: false

  # Cognitive Services
  coordination-service:
    container: "coordination-service:8001"
    routes:
      - path: "/api/v1/coordination/*"
        description: "ML coordination and orchestration"
        health_check: "/health"
        auth_required: true

  hybrid-memory-service:
    container: "hybrid-memory-service:8002"
    routes:
      - path: "/api/v1/memory/*"
        description: "Hybrid memory management"
        health_check: "/health"
        auth_required: true

  learning-service:
    container: "learning-service:8003"
    routes:
      - path: "/api/v1/learning/*"
        description: "Learning and pattern recognition"
        health_check: "/health"
        auth_required: true

  perception-service:
    container: "perception-service:8004"
    routes:
      - path: "/api/v1/perception/*"
        description: "Perception and analysis"
        health_check: "/health"
        auth_required: true

  reasoning-service:
    container: "reasoning-service:8005"
    routes:
      - path: "/api/v1/reasoning/*"
        description: "Reasoning and decision making"
        health_check: "/health"
        auth_required: true

  # Voice Interaction Service (NEW INTEGRATION)
  voice-interaction-service:
    container: "voice-interaction-service:8006"
    routes:
      - path: "/api/v1/voice/*"
        description: "Voice interaction, STT/TTS services"
        health_check: "/health"
        auth_required: true
    endpoints:
      # Speech-to-Text (STT) endpoint mapping
      stt:
        path: "/api/v1/voice/stt/transcribe"
        method: "POST"
        description: "Transcribe audio to text using hybrid Vosk/Whisper routing"
        auth_required: true
        content_type: "multipart/form-data"
        parameters:
          - name: "audio"
            type: "file"
            required: true
            description: "Audio file for transcription"
        fallback_engines:
          - "vosk"       # For short audio (<5s)
          - "whisper"    # For long audio (>=5s)
          - "google_cloud"  # Fallback for both
      
      # Text-to-Speech (TTS) endpoint mapping  
      tts:
        path: "/api/v1/voice/tts/synthesize"
        method: "POST"
        description: "Synthesize speech from text using multiple TTS engines"
        auth_required: true
        content_type: "application/json"
        parameters:
          - name: "text"
            type: "string"
            required: true
            description: "Text to synthesize"
          - name: "voice"
            type: "string"
            required: false
            default: "default"
            description: "Voice selection"
        fallback_engines:
          - "coqui_tts"      # Primary TTS engine
          - "google_cloud"   # Fallback TTS engine
          - "simulation"     # Final fallback

      # Model status endpoint
      models_status:
        path: "/api/v1/voice/models/status"
        method: "GET"
        description: "Get status of loaded voice models"
        auth_required: true

  # Dedicated Chat Service (NEW INTEGRATION)
  chat-service:
    container: "chat-service:8007"
    routes:
      - path: "/api/v1/chat-service/*"
        description: "Dedicated chat service with WebSocket support"
        health_check: "/health"
        auth_required: true
      - path: "/ws/chat-service"
        description: "WebSocket chat endpoint"
        protocol: "websocket"
        auth_required: true
        auth_method: "query_parameter"  # JWT via ?token=
    endpoints:
      # REST chat endpoint
      chat:
        path: "/api/v1/chat-service/api/v1/chat"
        method: "POST"
        description: "HTTP chat endpoint (REST fallback)"
        auth_required: true
        content_type: "application/json"
        parameters:
          - name: "message"
            type: "string"
            required: true
          - name: "session_id"
            type: "string"
            required: false
          - name: "chat_model"
            type: "string"
            required: false
            default: "llama3.2:3b"
      
      # Chat history endpoint
      history:
        path: "/api/v1/chat-service/api/v1/chat/history/{session_id}"
        method: "GET"
        description: "Get chat history for session"
        auth_required: true
        parameters:
          - name: "session_id"
            type: "string"
            required: true
          - name: "limit"
            type: "integer"
            required: false
            default: 50

      # WebSocket chat endpoint
      websocket:
        path: "/ws/chat-service"
        protocol: "websocket"
        description: "Real-time WebSocket chat"
        auth_required: true
        auth_method: "query_parameter"
        parameters:
          - name: "token"
            type: "string"
            required: true
            description: "JWT authentication token"
          - name: "session_id"
            type: "string"
            required: false
            description: "Chat session ID"

  # Infrastructure Services
  infrastructure-recovery-service:
    container: "infrastructure-recovery-service:8010"
    routes:
      - path: "/api/v1/infrastructure/*"
        description: "Infrastructure recovery and monitoring"
        health_check: "/health"
        auth_required: true

  # Monitoring and Support Services
  monitoring-service:
    container: "monitoring-service:8020"
    routes:
      - path: "/api/v1/monitoring/*"
        description: "Centralized monitoring aggregation"
        health_check: "/health"
        auth_required: true

  # Action Queue Services
  action-queue-service:
    container: "action-queue-service:8021"
    routes:
      - path: "/api/v1/actions/*"
        description: "Action queue management"
        health_check: "/health"
        auth_required: true

  # External API Integration
  external-api-service:
    container: "external-api-service:8012"
    routes:
      - path: "/api/v1/external/*"
        description: "External API integrations"
        health_check: "/health"
        auth_required: true

  # WebUI Frontend
  webui:
    container: "webui:3001"
    routes:
      - path: "/*"
        description: "React/Next.js frontend"
        health_check: "/"
        auth_required: false

# Circuit Breaker Configuration
circuit_breaker:
  enabled: true
  failure_threshold: 5        # Number of consecutive failures before opening circuit
  timeout: 30                 # Circuit breaker timeout in seconds
  reset_timeout: 60          # Time before attempting to close circuit
  half_open_max_calls: 3     # Max calls when in half-open state

# Health Monitoring Configuration
health_monitoring:
  enabled: true
  check_interval: 30         # Health check interval in seconds
  timeout: 10               # Health check timeout in seconds
  retry_attempts: 3         # Number of retry attempts
  unhealthy_threshold: 3    # Consecutive failures before marking unhealthy
  
  # Graceful degradation messages
  degradation_messages:
    voice-interaction-service: "Voice services temporarily offline. Text chat remains available."
    chat-service: "Dedicated chat service temporarily offline. Fallback to main API chat."
    coordination-service: "ML coordination temporarily offline. Basic functionality remains available."
    
# Load Balancing Configuration (for future blue-green deployments)
load_balancing:
  strategy: "round_robin"    # Options: round_robin, least_connections, ip_hash
  health_check_required: true
  sticky_sessions: false

# Enhanced LangGraph-Ollama Blue-Green Configuration (PLACEHOLDER)
blue_green_deployments:
  langgraph-service:
    enabled: false           # Will be enabled when enhanced service is deployed
    primary: "langgraph-service-v1:8030"
    secondary: "langgraph-service-v2:8031"
    failover_threshold: 3
    rollback_enabled: true
    health_check: "/health"
    routing_weight:
      primary: 100           # 100% traffic to primary initially
      secondary: 0           # 0% traffic to secondary initially